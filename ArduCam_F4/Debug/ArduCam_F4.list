
ArduCam_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  200000c0  08004170  000200c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000124  08004170  00020124  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dfa9  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022bc  00000000  00000000  0002e099  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000047d6  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000342c  00000000  00000000  00035f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039332  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002998  00000000  00000000  000393b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003bd48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c0 	.word	0x200000c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080033c8 	.word	0x080033c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c4 	.word	0x200000c4
 80001d4:	080033c8 	.word	0x080033c8

080001d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	bf0c      	ite	eq
 80001ec:	2301      	moveq	r3, #1
 80001ee:	2300      	movne	r3, #0
 80001f0:	b2db      	uxtb	r3, r3
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b084      	sub	sp, #16
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f7ff ffe3 	bl	80001d8 <LL_ADC_IsEnabled>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d117      	bne.n	8000248 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	6811      	ldr	r1, [r2, #0]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	6892      	ldr	r2, [r2, #8]
 800022c:	430a      	orrs	r2, r1
 800022e:	431a      	orrs	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	431a      	orrs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	e001      	b.n	800024c <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0201 	orr.w	r2, r3, #1
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f023 0201 	bic.w	r2, r3, #1
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000296:	b480      	push	{r7}
 8000298:	b085      	sub	sp, #20
 800029a:	af00      	add	r7, sp, #0
 800029c:	60f8      	str	r0, [r7, #12]
 800029e:	60b9      	str	r1, [r7, #8]
 80002a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	f023 021f 	bic.w	r2, r3, #31
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	430b      	orrs	r3, r1
 80002b0:	431a      	orrs	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b085      	sub	sp, #20
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80002d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002da:	68b9      	ldr	r1, [r7, #8]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	430a      	orrs	r2, r1
 80002e0:	431a      	orrs	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	609a      	str	r2, [r3, #8]
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80002f4:	b490      	push	{r4, r7}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
 8000300:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8000302:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8000304:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	4a3f      	ldr	r2, [pc, #252]	; (8000408 <LL_I2C_ConfigSpeed+0x114>)
 800030a:	fba2 2303 	umull	r2, r3, r2, r3
 800030e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000318:	ea43 0204 	orr.w	r2, r3, r4
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4938      	ldr	r1, [pc, #224]	; (800040c <LL_I2C_ConfigSpeed+0x118>)
 800032c:	428b      	cmp	r3, r1
 800032e:	d801      	bhi.n	8000334 <LL_I2C_ConfigSpeed+0x40>
 8000330:	1c63      	adds	r3, r4, #1
 8000332:	e008      	b.n	8000346 <LL_I2C_ConfigSpeed+0x52>
 8000334:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000338:	fb03 f304 	mul.w	r3, r3, r4
 800033c:	4934      	ldr	r1, [pc, #208]	; (8000410 <LL_I2C_ConfigSpeed+0x11c>)
 800033e:	fba1 1303 	umull	r1, r3, r1, r3
 8000342:	099b      	lsrs	r3, r3, #6
 8000344:	3301      	adds	r3, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a2f      	ldr	r2, [pc, #188]	; (800040c <LL_I2C_ConfigSpeed+0x118>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d939      	bls.n	80003c8 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d117      	bne.n	800038a <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4613      	mov	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	4413      	add	r3, r2
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	fbb2 f3f3 	udiv	r3, r2, r3
 8000368:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800036c:	2b00      	cmp	r3, #0
 800036e:	d009      	beq.n	8000384 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4613      	mov	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	4413      	add	r3, r2
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800037e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000382:	e01d      	b.n	80003c0 <LL_I2C_ConfigSpeed+0xcc>
 8000384:	f248 0301 	movw	r3, #32769	; 0x8001
 8000388:	e01a      	b.n	80003c0 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009a      	lsls	r2, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	fbb2 f3f3 	udiv	r3, r2, r3
 800039c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00b      	beq.n	80003bc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	009a      	lsls	r2, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80003b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003ba:	e001      	b.n	80003c0 <LL_I2C_ConfigSpeed+0xcc>
 80003bc:	f248 0301 	movw	r3, #32769	; 0x8001
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	ea43 0402 	orr.w	r4, r3, r2
 80003c6:	e010      	b.n	80003ea <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	d905      	bls.n	80003e6 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e4:	e000      	b.n	80003e8 <LL_I2C_ConfigSpeed+0xf4>
 80003e6:	2304      	movs	r3, #4
 80003e8:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80003f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80003f6:	ea43 0204 	orr.w	r2, r3, r4
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	61da      	str	r2, [r3, #28]
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bc90      	pop	{r4, r7}
 8000406:	4770      	bx	lr
 8000408:	431bde83 	.word	0x431bde83
 800040c:	000186a0 	.word	0x000186a0
 8000410:	10624dd3 	.word	0x10624dd3

08000414 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f023 021a 	bic.w	r2, r3, #26
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	431a      	orrs	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff03 	bl	8000276 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f89d 	bl	80005b4 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	68d9      	ldr	r1, [r3, #12]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	461a      	mov	r2, r3
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff ff06 	bl	8000296 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800048a:	6939      	ldr	r1, [r7, #16]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff2d 	bl	80002f4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	6959      	ldr	r1, [r3, #20]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	461a      	mov	r2, r3
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f7ff ff0c 	bl	80002c2 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ffaf 	bl	8000414 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff fecd 	bl	8000256 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4619      	mov	r1, r3
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f7ff ffb9 	bl	800043a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <LL_RCC_GetSysClkSource+0x18>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	f003 030c 	and.w	r3, r3, #12
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_RCC_GetAHBPrescaler+0x18>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800

0800050c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800

08000528 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <LL_RCC_GetAPB2Prescaler+0x18>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <LL_RCC_PLL_GetMainSource+0x18>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800

08000560 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <LL_RCC_PLL_GetN+0x18>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	099b      	lsrs	r3, r3, #6
 800056a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40023800 	.word	0x40023800

0800057c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_RCC_PLL_GetP+0x18>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <LL_RCC_PLL_GetDivider+0x18>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80005bc:	f000 f820 	bl	8000600 <RCC_GetSystemClockFreq>
 80005c0:	4602      	mov	r2, r0
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f83e 	bl	800064c <RCC_GetHCLKClockFreq>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f84c 	bl	8000678 <RCC_GetPCLK1ClockFreq>
 80005e0:	4602      	mov	r2, r0
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f858 	bl	80006a0 <RCC_GetPCLK2ClockFreq>
 80005f0:	4602      	mov	r2, r0
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60da      	str	r2, [r3, #12]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800060a:	f7ff ff63 	bl	80004d4 <LL_RCC_GetSysClkSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b04      	cmp	r3, #4
 8000612:	d006      	beq.n	8000622 <RCC_GetSystemClockFreq+0x22>
 8000614:	2b08      	cmp	r3, #8
 8000616:	d007      	beq.n	8000628 <RCC_GetSystemClockFreq+0x28>
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10a      	bne.n	8000632 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <RCC_GetSystemClockFreq+0x44>)
 800061e:	607b      	str	r3, [r7, #4]
      break;
 8000620:	e00a      	b.n	8000638 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <RCC_GetSystemClockFreq+0x48>)
 8000624:	607b      	str	r3, [r7, #4]
      break;
 8000626:	e007      	b.n	8000638 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000628:	2008      	movs	r0, #8
 800062a:	f000 f84d 	bl	80006c8 <RCC_PLL_GetFreqDomain_SYS>
 800062e:	6078      	str	r0, [r7, #4]
      break;
 8000630:	e002      	b.n	8000638 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <RCC_GetSystemClockFreq+0x44>)
 8000634:	607b      	str	r3, [r7, #4]
      break;
 8000636:	bf00      	nop
  }

  return frequency;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	00f42400 	.word	0x00f42400
 8000648:	017d7840 	.word	0x017d7840

0800064c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000654:	f7ff ff4c 	bl	80004f0 <LL_RCC_GetAHBPrescaler>
 8000658:	4603      	mov	r3, r0
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	f003 030f 	and.w	r3, r3, #15
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <RCC_GetHCLKClockFreq+0x28>)
 8000662:	5cd3      	ldrb	r3, [r2, r3]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	40d3      	lsrs	r3, r2
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08004090 	.word	0x08004090

08000678 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000680:	f7ff ff44 	bl	800050c <LL_RCC_GetAPB1Prescaler>
 8000684:	4603      	mov	r3, r0
 8000686:	0a9b      	lsrs	r3, r3, #10
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <RCC_GetPCLK1ClockFreq+0x24>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	40d3      	lsrs	r3, r2
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	080040a0 	.word	0x080040a0

080006a0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80006a8:	f7ff ff3e 	bl	8000528 <LL_RCC_GetAPB2Prescaler>
 80006ac:	4603      	mov	r3, r0
 80006ae:	0b5b      	lsrs	r3, r3, #13
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <RCC_GetPCLK2ClockFreq+0x24>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	40d3      	lsrs	r3, r2
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	080040a0 	.word	0x080040a0

080006c8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80006dc:	f7ff ff32 	bl	8000544 <LL_RCC_PLL_GetMainSource>
 80006e0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d003      	beq.n	80006f0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80006e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80006ec:	d003      	beq.n	80006f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80006ee:	e005      	b.n	80006fc <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80006f2:	617b      	str	r3, [r7, #20]
      break;
 80006f4:	e005      	b.n	8000702 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80006f8:	617b      	str	r3, [r7, #20]
      break;
 80006fa:	e002      	b.n	8000702 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80006fe:	617b      	str	r3, [r7, #20]
      break;
 8000700:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b08      	cmp	r3, #8
 8000706:	d113      	bne.n	8000730 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000708:	f7ff ff46 	bl	8000598 <LL_RCC_PLL_GetDivider>
 800070c:	4602      	mov	r2, r0
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	fbb3 f4f2 	udiv	r4, r3, r2
 8000714:	f7ff ff24 	bl	8000560 <LL_RCC_PLL_GetN>
 8000718:	4603      	mov	r3, r0
 800071a:	fb03 f404 	mul.w	r4, r3, r4
 800071e:	f7ff ff2d 	bl	800057c <LL_RCC_PLL_GetP>
 8000722:	4603      	mov	r3, r0
 8000724:	0c1b      	lsrs	r3, r3, #16
 8000726:	3301      	adds	r3, #1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fbb4 f3f3 	udiv	r3, r4, r3
 800072e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8000730:	693b      	ldr	r3, [r7, #16]
}
 8000732:	4618      	mov	r0, r3
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	bf00      	nop
 800073c:	00f42400 	.word	0x00f42400
 8000740:	017d7840 	.word	0x017d7840

08000744 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000754:	2b40      	cmp	r3, #64	; 0x40
 8000756:	d101      	bne.n	800075c <LL_SPI_IsEnabled+0x18>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <LL_SPI_IsEnabled+0x1a>
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b29b      	uxth	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	611a      	str	r2, [r3, #16]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8000794:	4905      	ldr	r1, [pc, #20]	; (80007ac <LL_APB1_GRP1_ForceReset+0x20>)
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LL_APB1_GRP1_ForceReset+0x20>)
 8000798:	6a1a      	ldr	r2, [r3, #32]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	620b      	str	r3, [r1, #32]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40023800 	.word	0x40023800

080007b0 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <LL_APB1_GRP1_ReleaseReset+0x24>)
 80007bc:	6a1a      	ldr	r2, [r3, #32]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4013      	ands	r3, r2
 80007c4:	620b      	str	r3, [r1, #32]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80007e0:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_APB2_GRP1_ForceReset+0x20>)
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <LL_APB2_GRP1_ForceReset+0x20>)
 80007e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8000808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	43db      	mvns	r3, r3
 800080e:	4013      	ands	r3, r2
 8000810:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <LL_SPI_DeInit+0xa4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d109      	bne.n	800084c <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8000838:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800083c:	f7ff ffcc 	bl	80007d8 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 8000840:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000844:	f7ff ffda 	bl	80007fc <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <LL_SPI_DeInit+0xa8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d109      	bne.n	8000868 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 8000854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000858:	f7ff ff98 	bl	800078c <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 800085c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000860:	f7ff ffa6 	bl	80007b0 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */
#if defined(SPI3)
  if (SPIx == SPI3)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <LL_SPI_DeInit+0xac>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d109      	bne.n	8000884 <LL_SPI_DeInit+0x60>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8000870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000874:	f7ff ff8a 	bl	800078c <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8000878:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800087c:	f7ff ff98 	bl	80007b0 <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI3 */
#if defined(SPI4)
  if (SPIx == SPI4)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <LL_SPI_DeInit+0xb0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d109      	bne.n	80008a0 <LL_SPI_DeInit+0x7c>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI4);
 800088c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000890:	f7ff ffa2 	bl	80007d8 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI4);
 8000894:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000898:	f7ff ffb0 	bl	80007fc <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI4 */
#if defined(SPI5)
  if (SPIx == SPI5)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LL_SPI_DeInit+0xb4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d109      	bne.n	80008bc <LL_SPI_DeInit+0x98>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI5);
 80008a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ac:	f7ff ff94 	bl	80007d8 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI5);
 80008b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b4:	f7ff ffa2 	bl	80007fc <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]

    status = SUCCESS;
  }
#endif /* SPI6 */

  return status;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40003800 	.word	0x40003800
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	40013400 	.word	0x40013400
 80008d8:	40015000 	.word	0x40015000

080008dc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff2a 	bl	8000744 <LL_SPI_IsEnabled>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d139      	bne.n	800096a <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008fe:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	6852      	ldr	r2, [r2, #4]
 800090a:	4311      	orrs	r1, r2
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	6892      	ldr	r2, [r2, #8]
 8000910:	4311      	orrs	r1, r2
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	68d2      	ldr	r2, [r2, #12]
 8000916:	4311      	orrs	r1, r2
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	6912      	ldr	r2, [r2, #16]
 800091c:	4311      	orrs	r1, r2
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	6952      	ldr	r2, [r2, #20]
 8000922:	4311      	orrs	r1, r2
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	6992      	ldr	r2, [r2, #24]
 8000928:	4311      	orrs	r1, r2
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	69d2      	ldr	r2, [r2, #28]
 800092e:	4311      	orrs	r1, r2
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	6a12      	ldr	r2, [r2, #32]
 8000934:	430a      	orrs	r2, r1
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f023 0204 	bic.w	r2, r3, #4
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	0c1b      	lsrs	r3, r3, #16
 800094a:	431a      	orrs	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000958:	d105      	bne.n	8000966 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff02 	bl	800076a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	61da      	str	r2, [r3, #28]
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	611a      	str	r2, [r3, #16]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	431a      	orrs	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	615a      	str	r2, [r3, #20]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a08:	d152      	bne.n	8000ab0 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009a      	lsls	r2, r3, #2
 8000a14:	441a      	add	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	095b      	lsrs	r3, r3, #5
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	009a      	lsls	r2, r3, #2
 8000a36:	441a      	add	r2, r3
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a40:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000a42:	fba3 0302 	umull	r0, r3, r3, r2
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	fb00 f303 	mul.w	r3, r0, r3
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	3332      	adds	r3, #50	; 0x32
 8000a54:	4a41      	ldr	r2, [pc, #260]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000a56:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	440b      	add	r3, r1
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	009a      	lsls	r2, r3, #2
 8000a76:	441a      	add	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000a82:	fba3 0302 	umull	r0, r3, r3, r2
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	fb00 f303 	mul.w	r3, r0, r3
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	3332      	adds	r3, #50	; 0x32
 8000a94:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000aae:	e04f      	b.n	8000b50 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009a      	lsls	r2, r3, #2
 8000aba:	441a      	add	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	b299      	uxth	r1, r3
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	009a      	lsls	r2, r3, #2
 8000adc:	441a      	add	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000ae8:	fba3 0302 	umull	r0, r3, r3, r2
 8000aec:	095b      	lsrs	r3, r3, #5
 8000aee:	2064      	movs	r0, #100	; 0x64
 8000af0:	fb00 f303 	mul.w	r3, r0, r3
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	3332      	adds	r3, #50	; 0x32
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	009a      	lsls	r2, r3, #2
 8000b18:	441a      	add	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000b24:	fba3 0302 	umull	r0, r3, r3, r2
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	fb00 f303 	mul.w	r3, r0, r3
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	3332      	adds	r3, #50	; 0x32
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <LL_USART_SetBaudRate+0x168>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	095b      	lsrs	r3, r3, #5
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	440b      	add	r3, r1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	609a      	str	r2, [r3, #8]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	51eb851f 	.word	0x51eb851f

08000b60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff04 	bl	8000980 <LL_USART_IsEnabled>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d149      	bne.n	8000c12 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000b86:	f023 030c 	bic.w	r3, r3, #12
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	6851      	ldr	r1, [r2, #4]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	68d2      	ldr	r2, [r2, #12]
 8000b92:	4311      	orrs	r1, r2
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	6912      	ldr	r2, [r2, #16]
 8000b98:	4311      	orrs	r1, r2
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	6992      	ldr	r2, [r2, #24]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fefb 	bl	80009a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff08 	bl	80009ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fcf6 	bl	80005b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <LL_USART_Init+0xbc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d102      	bne.n	8000bd6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	e00c      	b.n	8000bf0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <LL_USART_Init+0xc0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d102      	bne.n	8000be4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	e005      	b.n	8000bf0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <LL_USART_Init+0xc4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d101      	bne.n	8000bf0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00d      	beq.n	8000c12 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d009      	beq.n	8000c12 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69b9      	ldr	r1, [r7, #24]
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fef1 	bl	80009f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40011400 	.word	0x40011400

08000c28 <LL_USART_StructInit>:
  *                         whose fields will be set to default values.
  * @retval None
  */

void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Set USART_InitStruct fields to default values */
  USART_InitStruct->BaudRate            = 9600U;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c36:	601a      	str	r2, [r3, #0]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	611a      	str	r2, [r3, #16]
  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <ArduCam_Init>:
bool _ReadSensorReg8_8(uint8_t nRegID, uint8_t* nData);
bool _WriteSensorRegs8_8(const ac_sensor_reg_t reglist[]);


void ArduCam_Init(spi_drv_t* pSpi, gpio_pins_e eCS, spi_br_e ePrescaler, i2cdrv_t* pI2c)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	72fb      	strb	r3, [r7, #11]
 8000c76:	4613      	mov	r3, r2
 8000c78:	72bb      	strb	r3, [r7, #10]
  // configure SPI_CS
  g_pSpi = pSpi;
 8000c7a:	4a3c      	ldr	r2, [pc, #240]	; (8000d6c <ArduCam_Init+0x104>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6013      	str	r3, [r2, #0]
  g_eCS = eCS;
 8000c80:	4a3b      	ldr	r2, [pc, #236]	; (8000d70 <ArduCam_Init+0x108>)
 8000c82:	7afb      	ldrb	r3, [r7, #11]
 8000c84:	7013      	strb	r3, [r2, #0]
  g_eSpiPrescaler = ePrescaler;
 8000c86:	4a3b      	ldr	r2, [pc, #236]	; (8000d74 <ArduCam_Init+0x10c>)
 8000c88:	7abb      	ldrb	r3, [r7, #10]
 8000c8a:	7013      	strb	r3, [r2, #0]
  g_pI2c = pI2c;
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <ArduCam_Init+0x110>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]

  // set CS for output
  GPIO_SETPIN(g_eCS);
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <ArduCam_Init+0x108>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000c9e:	3380      	adds	r3, #128	; 0x80
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <ArduCam_Init+0x108>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	2201      	movs	r2, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	618b      	str	r3, [r1, #24]
  GPIO_ConfigPin(g_eCS, mode_output, outtype_pushpull, pushpull_no, speed_veryhigh);
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <ArduCam_Init+0x108>)
 8000cb6:	7818      	ldrb	r0, [r3, #0]
 8000cb8:	2303      	movs	r3, #3
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	f000 ff66 	bl	8001b92 <GPIO_ConfigPin>

  _WriteSensorReg8_8(0xff, 0x01);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	f000 f9bf 	bl	800104c <_WriteSensorReg8_8>
  _WriteSensorReg8_8(0x12, 0x80);
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f000 f9bb 	bl	800104c <_WriteSensorReg8_8>
  Timer_Delay_ms(100);
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f001 ffd8 	bl	8002c8c <Timer_Delay_ms>

  //Check if the camera module type is OV2640
  uint8_t nVid;
  uint8_t nPid;
  _WriteSensorReg8_8(0xff, 0x01);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	20ff      	movs	r0, #255	; 0xff
 8000ce0:	f000 f9b4 	bl	800104c <_WriteSensorReg8_8>
  _ReadSensorReg8_8(OV2640_CHIPID_HIGH, &nVid);
 8000ce4:	f107 0317 	add.w	r3, r7, #23
 8000ce8:	4619      	mov	r1, r3
 8000cea:	200a      	movs	r0, #10
 8000cec:	f000 f9ce 	bl	800108c <_ReadSensorReg8_8>
  _ReadSensorReg8_8(OV2640_CHIPID_LOW, &nPid);
 8000cf0:	f107 0316 	add.w	r3, r7, #22
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f000 f9c8 	bl	800108c <_ReadSensorReg8_8>
  if ((nVid != 0x26 ) && ((nPid != 0x41 ) || (nPid != 0x42 )))
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b26      	cmp	r3, #38	; 0x26
 8000d00:	d006      	beq.n	8000d10 <ArduCam_Init+0xa8>
 8000d02:	7dbb      	ldrb	r3, [r7, #22]
 8000d04:	2b41      	cmp	r3, #65	; 0x41
 8000d06:	d102      	bne.n	8000d0e <ArduCam_Init+0xa6>
 8000d08:	7dbb      	ldrb	r3, [r7, #22]
 8000d0a:	2b42      	cmp	r3, #66	; 0x42
 8000d0c:	d000      	beq.n	8000d10 <ArduCam_Init+0xa8>
  {
    while (1);
 8000d0e:	e7fe      	b.n	8000d0e <ArduCam_Init+0xa6>
  }

  // configure regs
  if (g_eFormat == format_jpeg)
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <ArduCam_Init+0x114>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d114      	bne.n	8000d42 <ArduCam_Init+0xda>
  {
    _WriteSensorRegs8_8(OV2640_JPEG_INIT);
 8000d18:	4819      	ldr	r0, [pc, #100]	; (8000d80 <ArduCam_Init+0x118>)
 8000d1a:	f000 f9cf 	bl	80010bc <_WriteSensorRegs8_8>
    _WriteSensorRegs8_8(OV2640_YUV422);
 8000d1e:	4819      	ldr	r0, [pc, #100]	; (8000d84 <ArduCam_Init+0x11c>)
 8000d20:	f000 f9cc 	bl	80010bc <_WriteSensorRegs8_8>
    _WriteSensorRegs8_8(OV2640_JPEG);
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <ArduCam_Init+0x120>)
 8000d26:	f000 f9c9 	bl	80010bc <_WriteSensorRegs8_8>
    _WriteSensorReg8_8(0xff, 0x01);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	20ff      	movs	r0, #255	; 0xff
 8000d2e:	f000 f98d 	bl	800104c <_WriteSensorReg8_8>
    _WriteSensorReg8_8(0x15, 0x00);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2015      	movs	r0, #21
 8000d36:	f000 f989 	bl	800104c <_WriteSensorReg8_8>
    _WriteSensorRegs8_8(OV2640_320x240_JPEG);
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <ArduCam_Init+0x124>)
 8000d3c:	f000 f9be 	bl	80010bc <_WriteSensorRegs8_8>
 8000d40:	e002      	b.n	8000d48 <ArduCam_Init+0xe0>
    //wrSensorReg8_8(0xff, 0x00);
    //wrSensorReg8_8(0x44, 0x32);
  }
  else
  {
    _WriteSensorRegs8_8(OV2640_QVGA);
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <ArduCam_Init+0x128>)
 8000d44:	f000 f9ba 	bl	80010bc <_WriteSensorRegs8_8>
  }

  Timer_Delay_ms(1000);
 8000d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4c:	f001 ff9e 	bl	8002c8c <Timer_Delay_ms>

  if (!ArduCam_Test())
 8000d50:	f000 f820 	bl	8000d94 <ArduCam_Test>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f083 0301 	eor.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d000      	beq.n	8000d62 <ArduCam_Init+0xfa>
  {
    while (1);
 8000d60:	e7fe      	b.n	8000d60 <ArduCam_Init+0xf8>
  }

}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	200000e8 	.word	0x200000e8
 8000d74:	200000e0 	.word	0x200000e0
 8000d78:	200000e4 	.word	0x200000e4
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	08003750 	.word	0x08003750
 8000d84:	08003a4c 	.word	0x08003a4c
 8000d88:	08003a74 	.word	0x08003a74
 8000d8c:	08003bd8 	.word	0x08003bd8
 8000d90:	08003448 	.word	0x08003448

08000d94 <ArduCam_Test>:

bool ArduCam_Test(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  ArduCam_WriteSpiReg(ARDUCAM_TEST_REG, ARDUCAM_TEST_VALUE);
 8000d98:	21a5      	movs	r1, #165	; 0xa5
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f8c6 	bl	8000f2c <ArduCam_WriteSpiReg>
  if (ArduCam_ReadSpiReg(ARDUCAM_TEST_REG) != ARDUCAM_TEST_VALUE)
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f88f 	bl	8000ec4 <ArduCam_ReadSpiReg>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2ba5      	cmp	r3, #165	; 0xa5
 8000daa:	d001      	beq.n	8000db0 <ArduCam_Test+0x1c>
  {
    return false;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e000      	b.n	8000db2 <ArduCam_Test+0x1e>
  }

  return true;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <ArduCam_FlushFifo>:

/**
 * flash fifo function is used to reset the fifo read pointer to ZERO
 */
void ArduCam_FlushFifo(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  ArduCam_WriteSpiReg(ARDUCAM_FIFO_CTRL_REG,  ARDUCAM_FIFO_RDPTR_RST_BIT);
 8000dba:	2110      	movs	r1, #16
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f000 f8b5 	bl	8000f2c <ArduCam_WriteSpiReg>
  ArduCam_WriteSpiReg(ARDUCAM_FIFO_CTRL_REG,  ARDUCAM_FIFO_WRPTR_RST_BIT);
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f000 f8b1 	bl	8000f2c <ArduCam_WriteSpiReg>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <ArduCam_ClearFifoFlag>:
ed
automatically. The clear_fifo_flag function is used to clear this flag before issuing next capture
command.
*/
void ArduCam_ClearFifoFlag(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  ArduCam_WriteSpiReg(ARDUCAM_FIFO_CTRL_REG, ARDUCAM_FIFO_CLEAR_BIT);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f000 f8a9 	bl	8000f2c <ArduCam_WriteSpiReg>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <ArduCam_StartCapture>:
used to issue a capture command. After this command the ArduCAM
hardware will wait for a start of a new frame then store the entire frame data to onboard frame
buffer.
 */
void ArduCam_StartCapture(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  ArduCam_WriteSpiReg(ARDUCAM_FIFO_CTRL_REG, ARDUCAM_FIFO_START_BIT);
 8000de2:	2102      	movs	r1, #2
 8000de4:	2004      	movs	r0, #4
 8000de6:	f000 f8a1 	bl	8000f2c <ArduCam_WriteSpiReg>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <ArduCam_ReadFifoLength>:
function is used to determine the length of current captured image. No te the
Rev.C shield doesn't support this feature
 * @return 32 bit length of captured image
 */
uint32_t ArduCam_ReadFifoLength(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
  uint32_t nSize1, nSize2, nSize3;

  nSize1 = ArduCam_ReadSpiReg(ARDUCAM_FIFO_SIZE1);
 8000df4:	2042      	movs	r0, #66	; 0x42
 8000df6:	f000 f865 	bl	8000ec4 <ArduCam_ReadSpiReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60fb      	str	r3, [r7, #12]
  nSize2 = ArduCam_ReadSpiReg(ARDUCAM_FIFO_SIZE2);
 8000dfe:	2043      	movs	r0, #67	; 0x43
 8000e00:	f000 f860 	bl	8000ec4 <ArduCam_ReadSpiReg>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60bb      	str	r3, [r7, #8]
  nSize3 = ArduCam_ReadSpiReg(ARDUCAM_FIFO_SIZE3);
 8000e08:	2044      	movs	r0, #68	; 0x44
 8000e0a:	f000 f85b 	bl	8000ec4 <ArduCam_ReadSpiReg>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	607b      	str	r3, [r7, #4]

  return ((nSize3 << 16) | (nSize2 << 8) | nSize1) & 0x07fffff;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <ArduCam_IsCaptureBit>:
{
  return ArduCam_ReadSpiReg(ARDUCAM_SINGLE_FIFO_READ);
}

bool ArduCam_IsCaptureBit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  uint8_t nValue = ArduCam_ReadSpiReg(ARDUCAM_TRIG);
 8000e32:	2041      	movs	r0, #65	; 0x41
 8000e34:	f000 f846 	bl	8000ec4 <ArduCam_ReadSpiReg>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  return nValue & ARDUCAM_CAP_DONE_BIT;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <ArduCam_ReadFifoBlock>:
 * Function reads data block from memory using burst mode
 * @param pBuffer
 * @param nLen
 */
void ArduCam_ReadFifoBlock(uint8_t* pBuffer, uint32_t nLen)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <ArduCam_ReadFifoBlock+0x64>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <ArduCam_ReadFifoBlock+0x68>)
 8000e64:	7819      	ldrb	r1, [r3, #0]
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <ArduCam_ReadFifoBlock+0x6c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f001 fd80 	bl	8002970 <spi_TransactionBegin>
  spi_SendData8(g_pSpi, ARDUCAM_BURST_FIFO_READ);
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <ArduCam_ReadFifoBlock+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	213c      	movs	r1, #60	; 0x3c
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fdbe 	bl	80029f8 <spi_SendData8>
  while (nLen--)
 8000e7c:	e00a      	b.n	8000e94 <ArduCam_ReadFifoBlock+0x40>
  {
    *pBuffer++ = spi_SendData8(g_pSpi, 0x00);
 8000e7e:	687c      	ldr	r4, [r7, #4]
 8000e80:	1c63      	adds	r3, r4, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <ArduCam_ReadFifoBlock+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fdb4 	bl	80029f8 <spi_SendData8>
 8000e90:	4603      	mov	r3, r0
 8000e92:	7023      	strb	r3, [r4, #0]
  while (nLen--)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	603a      	str	r2, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1ef      	bne.n	8000e7e <ArduCam_ReadFifoBlock+0x2a>
  }

  spi_TransactionEnd(g_pSpi, g_eCS);
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <ArduCam_ReadFifoBlock+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <ArduCam_ReadFifoBlock+0x68>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f001 fd82 	bl	80029b2 <spi_TransactionEnd>
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000dc 	.word	0x200000dc
 8000ebc:	200000e8 	.word	0x200000e8
 8000ec0:	200000e0 	.word	0x200000e0

08000ec4 <ArduCam_ReadSpiReg>:
{
  return ArduCam_ReadSpiReg(ARDUCAM_ARDUCHIP_VERSION);
}

uint8_t ArduCam_ReadSpiReg(uint8_t nAddr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <ArduCam_ReadSpiReg+0x5c>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <ArduCam_ReadSpiReg+0x60>)
 8000ed4:	7819      	ldrb	r1, [r3, #0]
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <ArduCam_ReadSpiReg+0x64>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f001 fd48 	bl	8002970 <spi_TransactionBegin>
  spi_SendData8(g_pSpi, nAddr & 0x7F);
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <ArduCam_ReadSpiReg+0x5c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f001 fd82 	bl	80029f8 <spi_SendData8>
  uint8_t nValue = spi_SendData8(g_pSpi, 0x00);
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <ArduCam_ReadSpiReg+0x5c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fd7c 	bl	80029f8 <spi_SendData8>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
  spi_TransactionEnd(g_pSpi, g_eCS);
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <ArduCam_ReadSpiReg+0x5c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <ArduCam_ReadSpiReg+0x60>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4610      	mov	r0, r2
 8000f10:	f001 fd4f 	bl	80029b2 <spi_TransactionEnd>
  return nValue;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000dc 	.word	0x200000dc
 8000f24:	200000e8 	.word	0x200000e8
 8000f28:	200000e0 	.word	0x200000e0

08000f2c <ArduCam_WriteSpiReg>:

void ArduCam_WriteSpiReg(uint8_t nAddr, uint8_t nData)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <ArduCam_WriteSpiReg+0x5c>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <ArduCam_WriteSpiReg+0x60>)
 8000f42:	7819      	ldrb	r1, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <ArduCam_WriteSpiReg+0x64>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f001 fd11 	bl	8002970 <spi_TransactionBegin>
  spi_SendData8(g_pSpi, nAddr | ARDUCAM_RWBIT);
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <ArduCam_WriteSpiReg+0x5c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f001 fd4b 	bl	80029f8 <spi_SendData8>
  spi_SendData8(g_pSpi, nData);
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <ArduCam_WriteSpiReg+0x5c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	79ba      	ldrb	r2, [r7, #6]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fd44 	bl	80029f8 <spi_SendData8>
  spi_TransactionEnd(g_pSpi, g_eCS);
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <ArduCam_WriteSpiReg+0x5c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <ArduCam_WriteSpiReg+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f001 fd19 	bl	80029b2 <spi_TransactionEnd>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000dc 	.word	0x200000dc
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	200000e0 	.word	0x200000e0

08000f94 <ArduCam_SetJpegSize>:
{

}

void ArduCam_SetJpegSize(ac_jpeg_size_e eJpegSize)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  switch(eJpegSize)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d839      	bhi.n	8001018 <ArduCam_SetJpegSize+0x84>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <ArduCam_SetJpegSize+0x18>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fd1 	.word	0x08000fd1
 8000fb0:	08000fd9 	.word	0x08000fd9
 8000fb4:	08000fe1 	.word	0x08000fe1
 8000fb8:	08000fe9 	.word	0x08000fe9
 8000fbc:	08000ff1 	.word	0x08000ff1
 8000fc0:	08000ff9 	.word	0x08000ff9
 8000fc4:	08001001 	.word	0x08001001
 8000fc8:	08001009 	.word	0x08001009
 8000fcc:	08001011 	.word	0x08001011
    {
    case size_160x120:
      _WriteSensorRegs8_8(OV2640_160x120_JPEG);
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <ArduCam_SetJpegSize+0x94>)
 8000fd2:	f000 f873 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000fd6:	e023      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_176x144:
      _WriteSensorRegs8_8(OV2640_176x144_JPEG);
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <ArduCam_SetJpegSize+0x98>)
 8000fda:	f000 f86f 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000fde:	e01f      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_320x240:
      _WriteSensorRegs8_8(OV2640_320x240_JPEG);
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <ArduCam_SetJpegSize+0x9c>)
 8000fe2:	f000 f86b 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000fe6:	e01b      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_352x288:
      _WriteSensorRegs8_8(OV2640_352x288_JPEG);
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <ArduCam_SetJpegSize+0xa0>)
 8000fea:	f000 f867 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000fee:	e017      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_640x480:
      _WriteSensorRegs8_8(OV2640_640x480_JPEG);
 8000ff0:	4811      	ldr	r0, [pc, #68]	; (8001038 <ArduCam_SetJpegSize+0xa4>)
 8000ff2:	f000 f863 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000ff6:	e013      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_800x600:
      _WriteSensorRegs8_8(OV2640_800x600_JPEG);
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <ArduCam_SetJpegSize+0xa8>)
 8000ffa:	f000 f85f 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8000ffe:	e00f      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_1024x768:
      _WriteSensorRegs8_8(OV2640_1024x768_JPEG);
 8001000:	480f      	ldr	r0, [pc, #60]	; (8001040 <ArduCam_SetJpegSize+0xac>)
 8001002:	f000 f85b 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8001006:	e00b      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_1280x1024:
      _WriteSensorRegs8_8(OV2640_1280x1024_JPEG);
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <ArduCam_SetJpegSize+0xb0>)
 800100a:	f000 f857 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 800100e:	e007      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    case size_1600x1200:
      _WriteSensorRegs8_8(OV2640_1600x1200_JPEG);
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <ArduCam_SetJpegSize+0xb4>)
 8001012:	f000 f853 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 8001016:	e003      	b.n	8001020 <ArduCam_SetJpegSize+0x8c>
    default:
      _WriteSensorRegs8_8(OV2640_320x240_JPEG);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <ArduCam_SetJpegSize+0x9c>)
 800101a:	f000 f84f 	bl	80010bc <_WriteSensorRegs8_8>
      break;
 800101e:	bf00      	nop
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08003a98 	.word	0x08003a98
 800102c:	08003b38 	.word	0x08003b38
 8001030:	08003bd8 	.word	0x08003bd8
 8001034:	08003c78 	.word	0x08003c78
 8001038:	08003d18 	.word	0x08003d18
 800103c:	08003dbc 	.word	0x08003dbc
 8001040:	08003e60 	.word	0x08003e60
 8001044:	08003efc 	.word	0x08003efc
 8001048:	08003fa0 	.word	0x08003fa0

0800104c <_WriteSensorReg8_8>:
    _WriteSensorReg8_8(0x7d, saturationLUT[eSaturation]);
  }
}

bool _WriteSensorReg8_8(uint8_t nRegID, uint8_t nData)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2];
  buf[0] = nRegID;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	733b      	strb	r3, [r7, #12]
  buf[1] = nData;
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	737b      	strb	r3, [r7, #13]

  return i2c_transfer(g_pI2c, ARDUCAM_ADDR, buf, 2, NULL, 0);
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_WriteSensorReg8_8+0x3c>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	2130      	movs	r1, #48	; 0x30
 8001078:	f001 f85c 	bl	8002134 <i2c_transfer>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000e4 	.word	0x200000e4

0800108c <_ReadSensorReg8_8>:

bool _ReadSensorReg8_8(uint8_t nRegID, uint8_t* nData)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  return i2c_transfer(g_pI2c, ARDUCAM_ADDR, &nRegID, 1, nData, 1);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_ReadSensorReg8_8+0x2c>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	1dfa      	adds	r2, r7, #7
 800109e:	2301      	movs	r3, #1
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	2130      	movs	r1, #48	; 0x30
 80010aa:	f001 f843 	bl	8002134 <i2c_transfer>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000e4 	.word	0x200000e4

080010bc <_WriteSensorRegs8_8>:

bool _WriteSensorRegs8_8(const ac_sensor_reg_t reglist[])
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  while ((reglist->reg != 0xff) | (reglist->val != 0xff))
 80010c4:	e014      	b.n	80010f0 <_WriteSensorRegs8_8+0x34>
  {
    if (!_WriteSensorReg8_8(reglist->reg, reglist->val))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ffb9 	bl	800104c <_WriteSensorReg8_8>
 80010da:	4603      	mov	r3, r0
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <_WriteSensorRegs8_8+0x2e>
    {
      return false;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e015      	b.n	8001116 <_WriteSensorRegs8_8+0x5a>
    }

    reglist++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
  while ((reglist->reg != 0xff) | (reglist->val != 0xff))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2bff      	cmp	r3, #255	; 0xff
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	885b      	ldrh	r3, [r3, #2]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1d8      	bne.n	80010c6 <_WriteSensorRegs8_8+0xa>
  }

  return true;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <App_Init>:
void _SendImageSerial(void);
bool _SendImageRadio(void);
void _UsartRcvCbk(uint8_t nValue);

void App_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
  bool bResult = HW_Init();
 8001126:	f000 fdff 	bl	8001d28 <HW_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]

  LL_RCC_ClocksTypeDef RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks); // Get system clocks
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa3f 	bl	80005b4 <LL_RCC_GetSystemClocksFreq>

  spi_Init(g_pSpi1, PA5, PA7, PA6);
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <App_Init+0xa4>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	2306      	movs	r3, #6
 800113c:	2207      	movs	r2, #7
 800113e:	2105      	movs	r1, #5
 8001140:	f001 fb6e 	bl	8002820 <spi_Init>
  i2c_init(g_pI2c1, PB7, PB6);
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <App_Init+0xa8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2216      	movs	r2, #22
 800114a:	2117      	movs	r1, #23
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fefb 	bl	8001f48 <i2c_init>

  if (!IPS6404_Init(g_pSpi1, APP_ISP6404_CS, 84000000))
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <App_Init+0xa4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <App_Init+0xac>)
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f936 	bl	80023cc <IPS6404_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <App_Init+0x50>
  {
    bResult = false;
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]
//  Clock_SetHSI();
//  Clock_SetPLL(8, 100, 2, CLOCK_SOURCE_HSI);
//  bool bRes = IPS6404_Test();

  // initialize SPI2
  spi_Init(g_pSpi2, PB13, PB15, PB14);
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <App_Init+0xb0>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	231e      	movs	r3, #30
 8001176:	221f      	movs	r2, #31
 8001178:	211d      	movs	r1, #29
 800117a:	f001 fb51 	bl	8002820 <spi_Init>
  //  if (!SI4463_Init(g_pSpi2))
  //  {
  //    bResult = false;
  //  }

  usart_Init(g_pUsart2, _UsartRcvCbk, PA2, PA3, 115200);
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <App_Init+0xb4>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2303      	movs	r3, #3
 800118a:	2202      	movs	r2, #2
 800118c:	4912      	ldr	r1, [pc, #72]	; (80011d8 <App_Init+0xb8>)
 800118e:	f001 feb1 	bl	8002ef4 <usart_Init>

  spi_br_e ePrescaler = spi_CalculatePrescaler(RCC_Clocks.PCLK2_Frequency, 2000000);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4911      	ldr	r1, [pc, #68]	; (80011dc <App_Init+0xbc>)
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fc7a 	bl	8002a90 <spi_CalculatePrescaler>
 800119c:	4603      	mov	r3, r0
 800119e:	75bb      	strb	r3, [r7, #22]
  ArduCam_Init(g_pSpi1, APP_ARDUCAM_CS, ePrescaler, g_pI2c1);
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <App_Init+0xa4>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <App_Init+0xa8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	7dba      	ldrb	r2, [r7, #22]
 80011aa:	2109      	movs	r1, #9
 80011ac:	f7ff fd5c 	bl	8000c68 <ArduCam_Init>

  usart_PrintLn(g_pUsart2, "ACK CMD OV2640 detected. END");
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <App_Init+0xb4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	490a      	ldr	r1, [pc, #40]	; (80011e0 <App_Init+0xc0>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 ff42 	bl	8003040 <usart_PrintLn>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	0501bd00 	.word	0x0501bd00
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000010 	.word	0x20000010
 80011d8:	08001595 	.word	0x08001595
 80011dc:	001e8480 	.word	0x001e8480
 80011e0:	080033e0 	.word	0x080033e0

080011e4 <App_Exec>:

void App_Exec(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  if (g_eCmd != app_cmd_none)
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <App_Exec+0x2c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2bff      	cmp	r3, #255	; 0xff
 80011ee:	d001      	beq.n	80011f4 <App_Exec+0x10>
  {
    _ProcessCmd();
 80011f0:	f000 f974 	bl	80014dc <_ProcessCmd>
  }

  if (g_eCmd == app_cmd_cap_JPEG)
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <App_Exec+0x2c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d106      	bne.n	800120a <App_Exec+0x26>
  {
    _CaptureImage();
 80011fc:	f000 f80a 	bl	8001214 <_CaptureImage>
    _SendImageSerial();
 8001200:	f000 f8b8 	bl	8001374 <_SendImageSerial>
    g_eCmd = app_cmd_none;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <App_Exec+0x2c>)
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	701a      	strb	r2, [r3, #0]
  }

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000f0 	.word	0x200000f0

08001214 <_CaptureImage>:

bool _CaptureImage(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800121a:	af00      	add	r7, sp, #0
  ArduCam_FlushFifo();
 800121c:	f7ff fdcb 	bl	8000db6 <ArduCam_FlushFifo>
  ArduCam_ClearFifoFlag();
 8001220:	f7ff fdd5 	bl	8000dce <ArduCam_ClearFifoFlag>
  ArduCam_StartCapture();
 8001224:	f7ff fddb 	bl	8000dde <ArduCam_StartCapture>
  while (!ArduCam_IsCaptureBit());
 8001228:	bf00      	nop
 800122a:	f7ff fdff 	bl	8000e2c <ArduCam_IsCaptureBit>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f7      	bne.n	800122a <_CaptureImage+0x16>
  uint32_t nImageSize = ArduCam_ReadFifoLength();
 800123a:	f7ff fdd8 	bl	8000dee <ArduCam_ReadFifoLength>
 800123e:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404
  bool bHeader = false;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
  bool bImageEnd = false;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402

  g_nImageSize = 0;
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <_CaptureImage+0x154>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
  while (nImageSize > 0)
 8001254:	e07b      	b.n	800134e <_CaptureImage+0x13a>
  {
    uint8_t arrImage[APP_BURST_SIZE];
    uint32_t nLen = APP_BURST_SIZE;
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
    if (nImageSize < APP_BURST_SIZE)
 800125e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001266:	d203      	bcs.n	8001270 <_CaptureImage+0x5c>
    {
      nLen = nImageSize;
 8001268:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800126c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
    }

    ArduCam_ReadFifoBlock(arrImage, nLen);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fdec 	bl	8000e54 <ArduCam_ReadFifoBlock>

    uint8_t* pBuffer = NULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
    uint32_t nBufferLen;
    if (!bHeader)
 8001282:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8001286:	f083 0301 	eor.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01d      	beq.n	80012cc <_CaptureImage+0xb8>
    {
      int32_t nOffset = _FindJpegStart(arrImage, nLen);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f8c2 	bl	8001420 <_FindJpegStart>
 800129c:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
      if (nOffset != -1)
 80012a0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d02b      	beq.n	8001302 <_CaptureImage+0xee>
      {
        bHeader = true;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
        pBuffer = arrImage + nOffset;
 80012b0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80012b4:	1d3a      	adds	r2, r7, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        nBufferLen = nLen - nOffset;
 80012bc:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80012c0:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80012ca:	e01a      	b.n	8001302 <_CaptureImage+0xee>
      }
    }
    else
    {
      int32_t nOffset = _FindJpegEnd(arrImage, nLen);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f8d6 	bl	8001484 <_FindJpegEnd>
 80012d8:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
      pBuffer = arrImage;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
      nBufferLen = nLen;
 80012e2:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80012e6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
      if (nOffset != -1)
 80012ea:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	d006      	beq.n	8001302 <_CaptureImage+0xee>
      {
        nBufferLen = nOffset;
 80012f4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80012f8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        bImageEnd = true;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
      }
    }

    if (pBuffer != NULL)
 8001302:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00f      	beq.n	800132a <_CaptureImage+0x116>
    {
      IPS6404_WriteBuffer(g_nImageSize, pBuffer, nBufferLen);
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <_CaptureImage+0x154>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 8001312:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	; 0x3f8
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f934 	bl	8002584 <IPS6404_WriteBuffer>
      g_nImageSize += nBufferLen;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <_CaptureImage+0x154>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001324:	4413      	add	r3, r2
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <_CaptureImage+0x154>)
 8001328:	6013      	str	r3, [r2, #0]
    }

    if (bImageEnd)
 800132a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <_CaptureImage+0x12c>
    {
      usart_PrintLn(g_pUsart2, "ACK CMD Image captured. END");
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <_CaptureImage+0x158>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <_CaptureImage+0x15c>)
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fe81 	bl	8003040 <usart_PrintLn>
 800133e:	e00b      	b.n	8001358 <_CaptureImage+0x144>
      break;
    }

    nImageSize -= nLen;
 8001340:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8001344:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  while (nImageSize > 0)
 800134e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001352:	2b00      	cmp	r3, #0
 8001354:	f47f af7f 	bne.w	8001256 <_CaptureImage+0x42>
  }

  return bImageEnd;
 8001358:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
}
 800135c:	4618      	mov	r0, r3
 800135e:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000ec 	.word	0x200000ec
 800136c:	20000010 	.word	0x20000010
 8001370:	08003400 	.word	0x08003400

08001374 <_SendImageSerial>:

void _SendImageSerial(void)
{
 8001374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4668      	mov	r0, sp
 800137e:	4680      	mov	r8, r0
  const uint16_t nBufferSize = 1000;
 8001380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001384:	81f8      	strh	r0, [r7, #14]
  uint8_t arrData[nBufferSize];
 8001386:	89f8      	ldrh	r0, [r7, #14]
 8001388:	3801      	subs	r0, #1
 800138a:	60b8      	str	r0, [r7, #8]
 800138c:	89fd      	ldrh	r5, [r7, #14]
 800138e:	f04f 0600 	mov.w	r6, #0
 8001392:	00f2      	lsls	r2, r6, #3
 8001394:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8001398:	00e9      	lsls	r1, r5, #3
 800139a:	89f9      	ldrh	r1, [r7, #14]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	00d4      	lsls	r4, r2, #3
 80013a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80013a6:	00cb      	lsls	r3, r1, #3
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	3307      	adds	r3, #7
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	ebad 0d03 	sub.w	sp, sp, r3
 80013b4:	466b      	mov	r3, sp
 80013b6:	3300      	adds	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  uint32_t nImagePos = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]

  while (nImagePos < g_nImageSize)
 80013be:	e020      	b.n	8001402 <_SendImageSerial+0x8e>
  {
   uint32_t nLen = g_nImageSize - nImagePos;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_SendImageSerial+0xa4>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	613b      	str	r3, [r7, #16]
   if (nLen > nBufferSize)
 80013ca:	89fa      	ldrh	r2, [r7, #14]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d201      	bcs.n	80013d6 <_SendImageSerial+0x62>
   {
     nLen = nBufferSize;
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	613b      	str	r3, [r7, #16]
   }

    IPS6404_ReadBuffer(nImagePos, arrData, nLen);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4619      	mov	r1, r3
 80013dc:	6978      	ldr	r0, [r7, #20]
 80013de:	f001 f87f 	bl	80024e0 <IPS6404_ReadBuffer>
    usart_Send(g_pUsart2, arrData, nLen);
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <_SendImageSerial+0xa8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fdf6 	bl	8002fdc <usart_Send>
    usart_WaitForTransmitComplete(g_pUsart2);
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <_SendImageSerial+0xa8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fe11 	bl	800301c <usart_WaitForTransmitComplete>

    nImagePos += nLen;
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
  while (nImagePos < g_nImageSize)
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <_SendImageSerial+0xa4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3d9      	bcc.n	80013c0 <_SendImageSerial+0x4c>
 800140c:	46c5      	mov	sp, r8
  }
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001418:	200000ec 	.word	0x200000ec
 800141c:	20000010 	.word	0x20000010

08001420 <_FindJpegStart>:

  return bResult;
}

int32_t _FindJpegStart(uint8_t* pBuffer, uint32_t nLen)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t sig = *((uint32_t *)pBuffer) & 0xFFFFFF;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001432:	60bb      	str	r3, [r7, #8]
  if (sig != JPEG_SOI_MARKER)
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <_FindJpegStart+0x60>)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4293      	cmp	r3, r2
 800143a:	d019      	beq.n	8001470 <_FindJpegStart+0x50>
  {
    for (uint32_t i = 0; i < nLen; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e00f      	b.n	8001462 <_FindJpegStart+0x42>
    {
      sig = *((uint32_t *)(&pBuffer[i])) & 0xFFFFFF;
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800144e:	60bb      	str	r3, [r7, #8]
      if (sig == JPEG_SOI_MARKER)
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <_FindJpegStart+0x60>)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <_FindJpegStart+0x3c>
      {
        return i;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	e00a      	b.n	8001472 <_FindJpegStart+0x52>
    for (uint32_t i = 0; i < nLen; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d3eb      	bcc.n	8001442 <_FindJpegStart+0x22>
      }
    }

    return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e000      	b.n	8001472 <_FindJpegStart+0x52>
  }

  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	00ffd8ff 	.word	0x00ffd8ff

08001484 <_FindJpegEnd>:

int32_t _FindJpegEnd(uint8_t* pBuffer, uint32_t nLen)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  int nOffset = -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *dptr = (uint8_t *)pBuffer + nLen - 2;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3b02      	subs	r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
  while (dptr > pBuffer)
 800149e:	e011      	b.n	80014c4 <_FindJpegEnd+0x40>
  {
    uint16_t sig = *((uint16_t *)dptr);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	81fb      	strh	r3, [r7, #14]
    if (sig == JPEG_EOI_MARKER)
 80014a6:	f64d 12ff 	movw	r2, #55807	; 0xd9ff
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d106      	bne.n	80014be <_FindJpegEnd+0x3a>
    {
      nOffset = dptr - pBuffer;
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	613b      	str	r3, [r7, #16]
      return nOffset + 2;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	3302      	adds	r3, #2
 80014bc:	e008      	b.n	80014d0 <_FindJpegEnd+0x4c>
    }

    dptr--;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  while (dptr > pBuffer)
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8e9      	bhi.n	80014a0 <_FindJpegEnd+0x1c>
  }

  return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_ProcessCmd>:

bool _ProcessCmd(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  bool bResult = true;
 80014e2:	2301      	movs	r3, #1
 80014e4:	71fb      	strb	r3, [r7, #7]

  switch (g_eCmd)
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <_ProcessCmd+0xac>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d838      	bhi.n	8001560 <_ProcessCmd+0x84>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <_ProcessCmd+0x18>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001519 	.word	0x08001519
 80014f8:	08001521 	.word	0x08001521
 80014fc:	08001529 	.word	0x08001529
 8001500:	08001531 	.word	0x08001531
 8001504:	08001539 	.word	0x08001539
 8001508:	08001541 	.word	0x08001541
 800150c:	08001549 	.word	0x08001549
 8001510:	08001551 	.word	0x08001551
 8001514:	08001559 	.word	0x08001559
  {
  case app_cmd_size_160x120:
    ArduCam_SetJpegSize(size_160x120);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fd3b 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 800151e:	e022      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_176x144:
    ArduCam_SetJpegSize(size_176x144);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fd37 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 8001526:	e01e      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_320x240:
    ArduCam_SetJpegSize(size_320x240);
 8001528:	2002      	movs	r0, #2
 800152a:	f7ff fd33 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 800152e:	e01a      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_352x288:
    ArduCam_SetJpegSize(size_352x288);
 8001530:	2003      	movs	r0, #3
 8001532:	f7ff fd2f 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 8001536:	e016      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_640x480:
    ArduCam_SetJpegSize(size_640x480);
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff fd2b 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 800153e:	e012      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_800x600:
    ArduCam_SetJpegSize(size_800x600);
 8001540:	2005      	movs	r0, #5
 8001542:	f7ff fd27 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 8001546:	e00e      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_1024x768:
    ArduCam_SetJpegSize(size_1024x768);
 8001548:	2006      	movs	r0, #6
 800154a:	f7ff fd23 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 800154e:	e00a      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_1280x1024:
    ArduCam_SetJpegSize(size_1280x1024);
 8001550:	2007      	movs	r0, #7
 8001552:	f7ff fd1f 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 8001556:	e006      	b.n	8001566 <_ProcessCmd+0x8a>
  case app_cmd_size_1600x1200:
    ArduCam_SetJpegSize(size_1600x1200);
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff fd1b 	bl	8000f94 <ArduCam_SetJpegSize>
    break;
 800155e:	e002      	b.n	8001566 <_ProcessCmd+0x8a>
  default:
    bResult = false;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
    break;
 8001564:	bf00      	nop
  }

  if (bResult)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <_ProcessCmd+0xa2>
  {
    usart_PrintLn(g_pUsart2, "ACK CMD Size changed. END");
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <_ProcessCmd+0xb0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <_ProcessCmd+0xb4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fd64 	bl	8003040 <usart_PrintLn>
    g_eCmd = app_cmd_none;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <_ProcessCmd+0xac>)
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	701a      	strb	r2, [r3, #0]
  }

  return bResult;
 800157e:	79fb      	ldrb	r3, [r7, #7]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200000f0 	.word	0x200000f0
 800158c:	20000010 	.word	0x20000010
 8001590:	0800341c 	.word	0x0800341c

08001594 <_UsartRcvCbk>:

void _UsartRcvCbk(uint8_t nValue)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  g_eCmd = nValue;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <_UsartRcvCbk+0x1c>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	7013      	strb	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	200000f0 	.word	0x200000f0

080015b4 <LL_RCC_HSE_Enable>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <LL_RCC_HSE_Enable+0x1c>)
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_RCC_HSE_Enable+0x1c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <LL_RCC_HSE_IsReady>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <LL_RCC_HSE_IsReady+0x24>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <LL_RCC_HSI_Enable>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <LL_RCC_HSI_Enable+0x1c>)
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_RCC_HSI_Enable+0x1c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <LL_RCC_HSI_IsReady>:
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_RCC_HSI_IsReady+0x20>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b02      	cmp	r3, #2
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40023800 	.word	0x40023800

08001640 <LL_RCC_SetSysClkSource>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <LL_RCC_SetSysClkSource+0x24>)
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <LL_RCC_SetSysClkSource+0x24>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40023800 	.word	0x40023800

08001668 <LL_RCC_PLL_Enable>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <LL_RCC_PLL_Enable+0x1c>)
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <LL_RCC_PLL_Enable+0x1c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <LL_RCC_PLL_Disable>:
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <LL_RCC_PLL_Disable+0x1c>)
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <LL_RCC_PLL_Disable+0x1c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <LL_RCC_PLL_IsReady>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <LL_RCC_PLL_IsReady+0x24>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016b8:	bf0c      	ite	eq
 80016ba:	2301      	moveq	r3, #1
 80016bc:	2300      	movne	r3, #0
 80016be:	b2db      	uxtb	r3, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4311      	orrs	r1, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	0192      	lsls	r2, r2, #6
 80016f2:	430a      	orrs	r2, r1
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40023800 	.word	0x40023800
 8001718:	ffbf8000 	.word	0xffbf8000

0800171c <LL_RCC_PLL_SetMainSource>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSource);
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <LL_RCC_PLL_SetMainSource+0x24>)
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <LL_RCC_PLL_SetMainSource+0x24>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40023800 	.word	0x40023800

08001744 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <LL_FLASH_SetLatency+0x24>)
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <LL_FLASH_SetLatency+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 020f 	bic.w	r2, r3, #15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40023c00 	.word	0x40023c00

0800176c <LL_FLASH_EnablePrefetch>:
  * @brief  Enable Prefetch
  * @rmtoll FLASH_ACR    PRFTEN        LL_FLASH_EnablePrefetch
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnablePrefetch(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <LL_FLASH_EnablePrefetch+0x1c>)
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <LL_FLASH_EnablePrefetch+0x1c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <LL_FLASH_EnableInstCache>:
  * @brief  Enable Instruction cache
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <LL_FLASH_EnableInstCache+0x1c>)
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <LL_FLASH_EnableInstCache+0x1c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <LL_FLASH_EnableDataCache>:
  * @brief  Enable Data cache
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <LL_FLASH_EnableDataCache+0x1c>)
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_FLASH_EnableDataCache+0x1c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00

080017cc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40007000 	.word	0x40007000

080017f4 <LL_APB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80017fc:	4908      	ldr	r1, [pc, #32]	; (8001820 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4313      	orrs	r3, r2
 8001806:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_APB1_GRP1_EnableClock+0x2c>)
 800180a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <LL_APB1_GRP1_DisableClock>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800182c:	4906      	ldr	r1, [pc, #24]	; (8001848 <LL_APB1_GRP1_DisableClock+0x24>)
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <LL_APB1_GRP1_DisableClock+0x24>)
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	43db      	mvns	r3, r3
 8001836:	4013      	ands	r3, r2
 8001838:	640b      	str	r3, [r1, #64]	; 0x40
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <Clock_SetPLL>:

/**
 * Set PLL as SYSCLK
 */
void Clock_SetPLL(uint32_t nPll_M, uint32_t nPll_N, uint32_t nPll_P, Clock_Source_e eClockSource)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  uint16_t nTimeout;

  LL_RCC_PLL_Disable();
 800185a:	f7ff ff15 	bl	8001688 <LL_RCC_PLL_Disable>
  if (eClockSource == CLOCK_SOURCE_HSI)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d112      	bne.n	800188a <Clock_SetPLL+0x3e>
  {
    LL_RCC_HSI_Enable();
 8001864:	f7ff feca 	bl	80015fc <LL_RCC_HSI_Enable>

    /* Wait till HSI is ready */
    nTimeout = 0xFFFF;
 8001868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186c:	82fb      	strh	r3, [r7, #22]
    while (!(LL_RCC_HSI_IsReady()) && nTimeout--);
 800186e:	bf00      	nop
 8001870:	f7ff fed4 	bl	800161c <LL_RCC_HSI_IsReady>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d104      	bne.n	8001884 <Clock_SetPLL+0x38>
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	82fa      	strh	r2, [r7, #22]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f5      	bne.n	8001870 <Clock_SetPLL+0x24>

    LL_RCC_PLL_SetMainSource(LL_RCC_PLLSOURCE_HSI);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ff49 	bl	800171c <LL_RCC_PLL_SetMainSource>
  }

  if (eClockSource == CLOCK_SOURCE_HSE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001890:	d113      	bne.n	80018ba <Clock_SetPLL+0x6e>
  {
    LL_RCC_HSE_Enable();
 8001892:	f7ff fe8f 	bl	80015b4 <LL_RCC_HSE_Enable>

    /* Wait till HSI is ready */
    nTimeout = 0xFFFF;
 8001896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189a:	82fb      	strh	r3, [r7, #22]
    while (!(LL_RCC_HSE_IsReady()) && nTimeout--);
 800189c:	bf00      	nop
 800189e:	f7ff fe99 	bl	80015d4 <LL_RCC_HSE_IsReady>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d104      	bne.n	80018b2 <Clock_SetPLL+0x66>
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	82fa      	strh	r2, [r7, #22]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f5      	bne.n	800189e <Clock_SetPLL+0x52>

    LL_RCC_PLL_SetMainSource(LL_RCC_PLLSOURCE_HSE);
 80018b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018b6:	f7ff ff31 	bl	800171c <LL_RCC_PLL_SetMainSource>
  }

  LL_RCC_PLL_ConfigDomain_SYS(eClockSource, nPll_M, nPll_N, (((nPll_P >> 1) - 1) << RCC_PLLCFGR_PLLP_Pos));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f7ff ff02 	bl	80016d0 <LL_RCC_PLL_ConfigDomain_SYS>

  // if core CLK > 84, set scale1
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018d0:	f7ff ff90 	bl	80017f4 <LL_APB1_GRP1_EnableClock>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018d4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80018d8:	f7ff ff78 	bl	80017cc <LL_PWR_SetRegulVoltageScaling>
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018e0:	f7ff ffa0 	bl	8001824 <LL_APB1_GRP1_DisableClock>

  LL_RCC_PLL_Enable();
 80018e4:	f7ff fec0 	bl	8001668 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  nTimeout = 0xFFFF;
 80018e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ec:	82fb      	strh	r3, [r7, #22]
  while (!LL_RCC_PLL_IsReady() && nTimeout--);
 80018ee:	bf00      	nop
 80018f0:	f7ff feda 	bl	80016a8 <LL_RCC_PLL_IsReady>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d104      	bne.n	8001904 <Clock_SetPLL+0xb8>
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	1e5a      	subs	r2, r3, #1
 80018fe:	82fa      	strh	r2, [r7, #22]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f5      	bne.n	80018f0 <Clock_SetPLL+0xa4>

  // latency for CLK 90-100 MHz and VCC 2.7 - 3.6V
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001904:	2003      	movs	r0, #3
 8001906:	f7ff ff1d 	bl	8001744 <LL_FLASH_SetLatency>

  LL_FLASH_EnablePrefetch();
 800190a:	f7ff ff2f 	bl	800176c <LL_FLASH_EnablePrefetch>
  LL_FLASH_EnableInstCache();
 800190e:	f7ff ff3d 	bl	800178c <LL_FLASH_EnableInstCache>
  LL_FLASH_EnableDataCache();
 8001912:	f7ff ff4b 	bl	80017ac <LL_FLASH_EnableDataCache>

  /* Enable PLL as main clock */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001916:	2002      	movs	r0, #2
 8001918:	f7ff fe92 	bl	8001640 <LL_RCC_SetSysClkSource>

  /* Update system core clock variable */
  SystemCoreClockUpdate();
 800191c:	f001 fcb6 	bl	800328c <SystemCoreClockUpdate>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2103      	movs	r1, #3
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	61bb      	str	r3, [r7, #24]
  return(result);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	605a      	str	r2, [r3, #4]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b089      	sub	sp, #36	; 0x24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	613b      	str	r3, [r7, #16]
  return(result);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2103      	movs	r1, #3
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	401a      	ands	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001a00:	bf00      	nop
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	613b      	str	r3, [r7, #16]
  return(result);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2103      	movs	r1, #3
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	60da      	str	r2, [r3, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <GPIO_ClockEnable>:
* Input          : - gpio: GPIO port
*          : - state: new clock state
* Return         : None
*******************************************************************************/
void GPIO_ClockEnable(gpio_pins_e ePortPin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  uint16_t nPort = ((uint32_t)GET_PORT(ePortPin) - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	81fb      	strh	r3, [r7, #14]
  RCC->AHB1ENR |= (1 << nPort);
 8001a7a:	4907      	ldr	r1, [pc, #28]	; (8001a98 <GPIO_ClockEnable+0x30>)
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <GPIO_ClockEnable+0x30>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	89fa      	ldrh	r2, [r7, #14]
 8001a82:	2001      	movs	r0, #1
 8001a84:	fa00 f202 	lsl.w	r2, r0, r2
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023800 	.word	0x40023800

08001a9c <GPIO_GetPort>:
  uint16_t nPort = ((uint32_t)GET_PORT(ePortPin) - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
  RCC->AHB1ENR &= ~(1 << nPort);
}

GPIO_TypeDef* GPIO_GetPort(gpio_pins_e ePortPin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef* port;
  port = (GPIO_TypeDef*)(GPIOA_BASE + ((ePortPin >> 4) * ((GPIOB_BASE) - (GPIOA_BASE))));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001ab0:	3380      	adds	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	60fb      	str	r3, [r7, #12]
  return port;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <GPIO_GetPin>:

uint16_t GPIO_GetPin(gpio_pins_e ePortPin)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  return (1 << (ePortPin & 0x0F));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	b29b      	uxth	r3, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <GPIO_SetAFpin>:
  /* Return source */
  return pinsource;
}

void GPIO_SetAFpin(gpio_pins_e ePortPin, uint8_t nAF)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
  uint32_t nPin = ePortPin & 0xF;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	60fb      	str	r3, [r7, #12]
  if (nPin < 8)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d81e      	bhi.n	8001b44 <GPIO_SetAFpin+0x5c>
  {
    MODIFY_REG(GET_PORT(ePortPin)->AFR[0], GPIO_AFRL_AFSEL0 << (nPin << 2), nAF << (nPin << 2));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001b10:	3380      	adds	r3, #128	; 0x80
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4618      	mov	r0, r3
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001b20:	3380      	adds	r3, #128	; 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4013      	ands	r3, r2
 8001b34:	79b9      	ldrb	r1, [r7, #6]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	6203      	str	r3, [r0, #32]
  else
  {
    nPin -= 8;
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
  }
}
 8001b42:	e020      	b.n	8001b86 <GPIO_SetAFpin+0x9e>
    nPin -= 8;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3b08      	subs	r3, #8
 8001b48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001b54:	3380      	adds	r3, #128	; 0x80
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	4618      	mov	r0, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001b64:	3380      	adds	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	210f      	movs	r1, #15
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4013      	ands	r3, r2
 8001b78:	79b9      	ldrb	r1, [r7, #6]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4313      	orrs	r3, r2
 8001b84:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <GPIO_ConfigPin>:

void GPIO_ConfigPin(gpio_pins_e ePin, pin_mode_e eMode, pin_output_type_e eOutType, pin_pushpull_e ePull, pin_speed_e eSpeed)
{
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71bb      	strb	r3, [r7, #6]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	717b      	strb	r3, [r7, #5]
 8001bac:	4613      	mov	r3, r2
 8001bae:	713b      	strb	r3, [r7, #4]
  GPIO_ClockEnable(ePin);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff58 	bl	8001a68 <GPIO_ClockEnable>

  LL_GPIO_SetPinMode(GET_PORT(ePin), GET_PIN(ePin), eMode);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001bc2:	3380      	adds	r3, #128	; 0x80
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	2201      	movs	r2, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f7ff fea5 	bl	8001928 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinOutputType(GET_PORT(ePin), GET_PIN(ePin), eOutType);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001be8:	3380      	adds	r3, #128	; 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4618      	mov	r0, r3
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7ff febf 	bl	8001982 <LL_GPIO_SetPinOutputType>

  LL_GPIO_SetPinPull(GET_PORT(ePin), GET_PIN(ePin), ePull);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c0e:	3380      	adds	r3, #128	; 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4618      	mov	r0, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	793b      	ldrb	r3, [r7, #4]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f7ff fef1 	bl	8001a0c <LL_GPIO_SetPinPull>

  LL_GPIO_SetPinSpeed(GET_PORT(ePin), GET_PIN(ePin), eSpeed);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c34:	3380      	adds	r3, #128	; 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4618      	mov	r0, r3
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	2201      	movs	r2, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	7e3b      	ldrb	r3, [r7, #24]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f7ff feb1 	bl	80019b2 <LL_GPIO_SetPinSpeed>
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}

08001c58 <LL_ADC_SetCommonClock>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	605a      	str	r2, [r3, #4]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_REG_SetTriggerSource>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_REG_SetSequencerLength>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <LL_APB2_GRP1_EnableClock>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cd8:	4908      	ldr	r1, [pc, #32]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40023800 	.word	0x40023800

08001d00 <LL_APB2_GRP1_DisableClock>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001d08:	4906      	ldr	r1, [pc, #24]	; (8001d24 <LL_APB2_GRP1_DisableClock+0x24>)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_APB2_GRP1_DisableClock+0x24>)
 8001d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4013      	ands	r3, r2
 8001d14:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HW_Init>:

static uint16_t                  g_nVoltage = 0;                 // measured voltage from modem task
static int16_t                   g_nTemp;                        // measured temperature

bool HW_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af02      	add	r7, sp, #8

 // WDG_Init(WDG_Timeout_32s);

  Clock_SetPLL(8, 100, 2, CLOCK_SOURCE_HSI);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2202      	movs	r2, #2
 8001d32:	2164      	movs	r1, #100	; 0x64
 8001d34:	2008      	movs	r0, #8
 8001d36:	f7ff fd89 	bl	800184c <Clock_SetPLL>

  Timer_Init();
 8001d3a:	f000 ff87 	bl	8002c4c <Timer_Init>

  HW_ReadCPUID();
 8001d3e:	f000 f847 	bl	8001dd0 <HW_ReadCPUID>

  // configure board LED
  GPIO_ConfigPin(BOARD_LED, mode_output, outtype_pushpull, pushpull_no, speed_low);
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	202d      	movs	r0, #45	; 0x2d
 8001d4e:	f7ff ff20 	bl	8001b92 <GPIO_ConfigPin>
  BOARD_LED_OFF;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HW_Init+0x50>)
 8001d54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d58:	619a      	str	r2, [r3, #24]

  // configure CAM supply pin
  GPIO_ConfigPin(HW_CAM_SUPPLY, mode_analog, outtype_pushpull, pushpull_down, speed_low);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2302      	movs	r3, #2
 8001d60:	2200      	movs	r2, #0
 8001d62:	2103      	movs	r1, #3
 8001d64:	2019      	movs	r0, #25
 8001d66:	f7ff ff14 	bl	8001b92 <GPIO_ConfigPin>

  // configure BAT analog pin
  //GPIO_ConfigPin(HW_BAT, mode_analog, outtype_pushpull, pushpull_down, speed_low);

  HW_AdcInit();
 8001d6a:	f000 f807 	bl	8001d7c <HW_AdcInit>

  return true;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020800 	.word	0x40020800

08001d7c <HW_AdcInit>:
{
  bOn ? HW_CAM_SUPPLY_ON : HW_CAM_SUPPLY_OFF;
}

void HW_AdcInit(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
  //enable ADC1 clock
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001d82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d86:	f7ff ffa3 	bl	8001cd0 <LL_APB2_GRP1_EnableClock>

  // Set ADC clock (conversion clock) common to several ADC instances
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(), LL_ADC_CLOCK_SYNC_PCLK_DIV2);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <HW_AdcInit+0x4c>)
 8001d8e:	f7ff ff63 	bl	8001c58 <LL_ADC_SetCommonClock>

  LL_ADC_InitTypeDef ADC_Init;
  ADC_Init.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  ADC_Init.Resolution = LL_ADC_RESOLUTION_12B;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  ADC_Init.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  LL_ADC_Init(ADC1, &ADC_Init);
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	480a      	ldr	r0, [pc, #40]	; (8001dcc <HW_AdcInit+0x50>)
 8001da4:	f7fe fa2b 	bl	80001fe <LL_ADC_Init>

  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_SOFTWARE);
 8001da8:	2100      	movs	r1, #0
 8001daa:	4808      	ldr	r0, [pc, #32]	; (8001dcc <HW_AdcInit+0x50>)
 8001dac:	f7ff ff67 	bl	8001c7e <LL_ADC_REG_SetTriggerSource>

  LL_ADC_REG_SetSequencerLength(ADC1, LL_ADC_REG_SEQ_SCAN_DISABLE);
 8001db0:	2100      	movs	r1, #0
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <HW_AdcInit+0x50>)
 8001db4:	f7ff ff78 	bl	8001ca8 <LL_ADC_REG_SetSequencerLength>

  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001db8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dbc:	f7ff ffa0 	bl	8001d00 <LL_APB2_GRP1_DisableClock>
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40012300 	.word	0x40012300
 8001dcc:	40012000 	.word	0x40012000

08001dd0 <HW_ReadCPUID>:
//  RCC_HCLKConfig(eAHBPresc);
//  Timer_SystickUpdate();
//}

void HW_ReadCPUID(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
//  uint32_t w0 = LL_GetUID_Word0();
//  uint32_t w1 = LL_GetUID_Word1();
//  uint32_t w2 = LL_GetUID_Word2();
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001dea:	4909      	ldr	r1, [pc, #36]	; (8001e10 <NVIC_EnableIRQ+0x30>)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2001      	movs	r0, #1
 8001dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0b      	bge.n	8001e40 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <NVIC_SetPriority+0x4c>)
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	3b04      	subs	r3, #4
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3e:	e009      	b.n	8001e54 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	4908      	ldr	r1, [pc, #32]	; (8001e64 <NVIC_SetPriority+0x50>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	619a      	str	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <LL_APB1_GRP1_EnableClock>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001eac:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <__i2c_set_start>:
 * Generate an I2C START condition.  Per the reference manual, we wait
 * for the hardware to clear the start bit after setting it before
 * allowing any further writes to CR1.  This prevents random lockups.
 */
static inline void __i2c_set_start(i2cdrv_t *i2c)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  i2c->pHW->reg->CR1 |= I2C_CR1_START;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]
  while (i2c->pHW->reg->CR1 & I2C_CR1_START);
 8001ef0:	bf00      	nop
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f7      	bne.n	8001ef2 <__i2c_set_start+0x1e>
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <__i2c_set_stop>:
 * Generate an I2C STOP condition.  Per the reference manual, we wait
 * for the hardware to clear the stop bit after setting it before
 * allowing any further writes to CR1.  This prevents random lockups.
 */
static inline void __i2c_set_stop(i2cdrv_t *i2c)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  i2c->pHW->reg->CR1 |= I2C_CR1_STOP;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f28:	601a      	str	r2, [r3, #0]
  while (i2c->pHW->reg->CR1 & I2C_CR1_STOP);
 8001f2a:	bf00      	nop
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f7      	bne.n	8001f2c <__i2c_set_stop+0x1e>
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <i2c_init>:
//  i2c->pHW->reg->CR2 &= ~I2C_CR2_FREQ;
//  __i2c_update_cr2(i2c, freq->pclk1 / 1000000);
}

void i2c_init(i2cdrv_t *pDrv, gpio_pins_e eSdaPin, gpio_pins_e eSclPin)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08f      	sub	sp, #60	; 0x3c
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
 8001f54:	4613      	mov	r3, r2
 8001f56:	70bb      	strb	r3, [r7, #2]
  GPIO_ConfigPin(eSdaPin, mode_input, outtype_od, pushpull_no, speed_high);
 8001f58:	78f8      	ldrb	r0, [r7, #3]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2201      	movs	r2, #1
 8001f62:	2100      	movs	r1, #0
 8001f64:	f7ff fe15 	bl	8001b92 <GPIO_ConfigPin>

  // busy SDA line check and release
  if ((GPIO_GetPort(eSdaPin)->IDR & GPIO_GetPin(eSdaPin)) == 0)
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fd96 	bl	8001a9c <GPIO_GetPort>
 8001f70:	4603      	mov	r3, r0
 8001f72:	691c      	ldr	r4, [r3, #16]
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fda4 	bl	8001ac4 <GPIO_GetPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4023      	ands	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d158      	bne.n	8002036 <i2c_init+0xee>
  {
    GPIO_ConfigPin(eSclPin, mode_output, outtype_od, pushpull_no, speed_high);
 8001f84:	78b8      	ldrb	r0, [r7, #2]
 8001f86:	2302      	movs	r3, #2
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f7ff fdff 	bl	8001b92 <GPIO_ConfigPin>

    LL_GPIO_ResetOutputPin(GPIO_GetPort(eSclPin), GPIO_GetPin(eSclPin));
 8001f94:	78bb      	ldrb	r3, [r7, #2]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fd80 	bl	8001a9c <GPIO_GetPort>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	78bb      	ldrb	r3, [r7, #2]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fd8f 	bl	8001ac4 <GPIO_GetPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff ff6a 	bl	8001e84 <LL_GPIO_ResetOutputPin>
    while ((GPIO_GetPort(eSdaPin)->IDR & GPIO_GetPin(eSdaPin)) == 0)
 8001fb0:	e033      	b.n	800201a <i2c_init+0xd2>
    {
      LL_GPIO_SetOutputPin(GPIO_GetPort(eSclPin), GPIO_GetPin(eSclPin));
 8001fb2:	78bb      	ldrb	r3, [r7, #2]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd71 	bl	8001a9c <GPIO_GetPort>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	78bb      	ldrb	r3, [r7, #2]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fd80 	bl	8001ac4 <GPIO_GetPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7ff ff4d 	bl	8001e68 <LL_GPIO_SetOutputPin>

      // delay min 10us
      for (uint32_t i = 0; i < 1500; ++i)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	e003      	b.n	8001fdc <i2c_init+0x94>
      {
        asm("nop");
 8001fd4:	bf00      	nop
      for (uint32_t i = 0; i < 1500; ++i)
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	3301      	adds	r3, #1
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	f240 52db 	movw	r2, #1499	; 0x5db
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d9f6      	bls.n	8001fd4 <i2c_init+0x8c>
      }

      LL_GPIO_ResetOutputPin(GPIO_GetPort(eSclPin), GPIO_GetPin(eSclPin));
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fd57 	bl	8001a9c <GPIO_GetPort>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	78bb      	ldrb	r3, [r7, #2]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fd66 	bl	8001ac4 <GPIO_GetPin>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ff41 	bl	8001e84 <LL_GPIO_ResetOutputPin>
      // delay min 10us
      for (uint32_t i = 0; i < 1500; ++i)
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 8002006:	e003      	b.n	8002010 <i2c_init+0xc8>
      {
        asm("nop");
 8002008:	bf00      	nop
      for (uint32_t i = 0; i < 1500; ++i)
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	3301      	adds	r3, #1
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	f240 52db 	movw	r2, #1499	; 0x5db
 8002016:	4293      	cmp	r3, r2
 8002018:	d9f6      	bls.n	8002008 <i2c_init+0xc0>
    while ((GPIO_GetPort(eSdaPin)->IDR & GPIO_GetPin(eSdaPin)) == 0)
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fd3d 	bl	8001a9c <GPIO_GetPort>
 8002022:	4603      	mov	r3, r0
 8002024:	691c      	ldr	r4, [r3, #16]
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fd4b 	bl	8001ac4 <GPIO_GetPin>
 800202e:	4603      	mov	r3, r0
 8002030:	4023      	ands	r3, r4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0bd      	beq.n	8001fb2 <i2c_init+0x6a>
      }
    }
  }

  LL_APB1_GRP1_EnableClock(pDrv->pHW->nAPBclock);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <LL_APB1_GRP1_EnableClock>

  // Configure I2C pins: SCL and SDA
  GPIO_ConfigPin(eSclPin, mode_alternate, outtype_od, pushpull_no, speed_high);
 8002042:	78b8      	ldrb	r0, [r7, #2]
 8002044:	2302      	movs	r3, #2
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2201      	movs	r2, #1
 800204c:	2102      	movs	r1, #2
 800204e:	f7ff fda0 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eSclPin, pDrv->pHW->nGpioAF);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	7a1a      	ldrb	r2, [r3, #8]
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fd43 	bl	8001ae8 <GPIO_SetAFpin>

  GPIO_ConfigPin(eSdaPin, mode_alternate, outtype_od, pushpull_no, speed_high);
 8002062:	78f8      	ldrb	r0, [r7, #3]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	2201      	movs	r2, #1
 800206c:	2102      	movs	r1, #2
 800206e:	f7ff fd90 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eSdaPin, pDrv->pHW->nGpioAF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	7a1a      	ldrb	r2, [r3, #8]
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd33 	bl	8001ae8 <GPIO_SetAFpin>

  /* Reset and clear peripheral. */
  pDrv->pHW->reg->CR1 = I2C_CR1_SWRST;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800208c:	601a      	str	r2, [r3, #0]
  pDrv->pHW->reg->CR1 = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  reg->TRISE = ((freq.pclk1 / 1000000 + 1) & I2C_TRISE_TRISE);
#endif

  /* I2C configuration */
  LL_I2C_InitTypeDef I2C_InitStructure;
  I2C_InitStructure.PeripheralMode = LL_I2C_MODE_I2C;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  I2C_InitStructure.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  I2C_InitStructure.OwnAddress1 = 0x00;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  I2C_InitStructure.TypeAcknowledge = LL_I2C_ACK;
 80020a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a8:	623b      	str	r3, [r7, #32]
  I2C_InitStructure.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80020aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStructure.ClockSpeed = 100000; // PCLK1 must be a multiple of 10MHz to reach the 400 kHz maximum I2C Fm mode clock.
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <i2c_init+0x1e8>)
 80020b2:	60fb      	str	r3, [r7, #12]
  I2C_InitStructure.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  I2C_InitStructure.DigitalFilter = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  LL_I2C_Init(pDrv->pHW->reg, &I2C_InitStructure);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f107 0208 	add.w	r2, r7, #8
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f9c9 	bl	8000460 <LL_I2C_Init>

  // enable interrupts
  pDrv->pHW->reg->CR2 |= I2C_CR2_ITERREN  /* Error interrupt enable */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	6852      	ldr	r2, [r2, #4]
 80020dc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80020e0:	605a      	str	r2, [r3, #4]
      | I2C_CR2_ITEVTEN  /* Event interrupt enable */
      | I2C_CR2_ITBUFEN  /* Buffer interrupt enable */
      ;

  /* Enable interrupts globally */
  NVIC_SetPriority(pDrv->pHW->irq_ev, 2);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe91 	bl	8001e14 <NVIC_SetPriority>
  NVIC_SetPriority(pDrv->pHW->irq_er, 2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fe89 	bl	8001e14 <NVIC_SetPriority>
  NVIC_EnableIRQ(pDrv->pHW->irq_ev);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fe68 	bl	8001de0 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(pDrv->pHW->irq_er);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fe61 	bl	8001de0 <NVIC_EnableIRQ>

  /* Enable the I2C peripheral */
  pDrv->pHW->reg->CR1 = I2C_CR1_PE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3734      	adds	r7, #52	; 0x34
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	000186a0 	.word	0x000186a0

08002134 <i2c_transfer>:

bool i2c_transfer(i2cdrv_t *drv, uint8_t addr,
                  const uint8_t *tx_buf, size_t tx_len,
                  uint8_t *rx_buf, size_t rx_len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	72fb      	strb	r3, [r7, #11]
  bool result = true;
 8002144:	2301      	movs	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]

  if (drv->bLock)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	7d5b      	ldrb	r3, [r3, #21]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <i2c_transfer+0x20>
  {
    return false;
 8002150:	2300      	movs	r3, #0
 8002152:	e02f      	b.n	80021b4 <i2c_transfer+0x80>
  }

  drv->nAddr     = addr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	7afa      	ldrb	r2, [r7, #11]
 8002158:	711a      	strb	r2, [r3, #4]
  drv->nWriteLen = tx_len;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	80da      	strh	r2, [r3, #6]
  drv->pWrite    = (uint8_t *)tx_buf;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
  drv->nReadLen  = rx_len;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	811a      	strh	r2, [r3, #8]
  drv->pRead     = rx_buf;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	611a      	str	r2, [r3, #16]

  if (drv->bError)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	7d1b      	ldrb	r3, [r3, #20]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <i2c_transfer+0x56>
  {
    drv->bError = false;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	751a      	strb	r2, [r3, #20]
    result = false;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
  }

  drv->bLock = true;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	755a      	strb	r2, [r3, #21]
  drv->bComplete = false;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	759a      	strb	r2, [r3, #22]
  __i2c_set_start(drv);
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff fe9c 	bl	8001ed4 <__i2c_set_start>

  while (!drv->bComplete);
 800219c:	bf00      	nop
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	7d9b      	ldrb	r3, [r3, #22]
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f8      	bne.n	800219e <i2c_transfer+0x6a>
  drv->bLock = false;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	755a      	strb	r2, [r3, #21]
  return result;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <__i2c_event_irq_handler>:
{
  return i2c_transfer(drv, addr, &reg, 1, buf, len);
}

static void __i2c_event_irq_handler(i2cdrv_t *drv)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  I2C_TypeDef* i2cReg = drv->pHW->reg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Read both status registers*/
  uint16_t sr1 = i2cReg->SR1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	817b      	strh	r3, [r7, #10]
  i2cReg->SR2;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]

  /* Start bit sent. */
  if (sr1 & I2C_SR1_SB)
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00f      	beq.n	8002200 <__i2c_event_irq_handler+0x44>
  {
    i2cReg->DR = (drv->nAddr << 1) | (drv->nWriteLen ? 0 : 1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	88d2      	ldrh	r2, [r2, #6]
 80021ec:	b292      	uxth	r2, r2
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	bf0c      	ite	eq
 80021f2:	2201      	moveq	r2, #1
 80021f4:	2200      	movne	r2, #0
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4313      	orrs	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Address sent. */
  if (sr1 & I2C_SR1_ADDR)
 8002200:	897b      	ldrh	r3, [r7, #10]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d027      	beq.n	800225a <__i2c_event_irq_handler+0x9e>
  {
    if (drv->nWriteLen)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	88db      	ldrh	r3, [r3, #6]
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <__i2c_event_irq_handler+0x80>
    {
      /* Send a byte off the write buffer. */
      i2cReg->DR = *(drv->pWrite);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	611a      	str	r2, [r3, #16]
      drv->pWrite++;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
      drv->nWriteLen--;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	88db      	ldrh	r3, [r3, #6]
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	80da      	strh	r2, [r3, #6]
 800223a:	e00e      	b.n	800225a <__i2c_event_irq_handler+0x9e>
    }
    else
    {
      if (drv->nReadLen > 1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	891b      	ldrh	r3, [r3, #8]
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d906      	bls.n	8002254 <__i2c_event_irq_handler+0x98>
      {
        /* Send ack on next read byte */
        i2cReg->CR1 |= I2C_CR1_ACK;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e002      	b.n	800225a <__i2c_event_irq_handler+0x9e>
      }
      else
      {
        /* One byte left to read, send stop afterwards. */
        __i2c_set_stop(drv);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe5a 	bl	8001f0e <__i2c_set_stop>
      }
    }
  }

  /* RX Not empty (got new byte) */
  if (sr1 & I2C_SR1_RXNE)
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d027      	beq.n	80022b4 <__i2c_event_irq_handler+0xf8>
  {
    /* Read into read buffer. */
    *(drv->pRead) = i2cReg->DR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6912      	ldr	r2, [r2, #16]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
    drv->pRead++;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
    drv->nReadLen--;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	891b      	ldrh	r3, [r3, #8]
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	811a      	strh	r2, [r3, #8]

    if (drv->nReadLen == 1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	891b      	ldrh	r3, [r3, #8]
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <__i2c_event_irq_handler+0xe8>
    {
      /* Unset Ack, set Stop */
      i2cReg->CR1 &= ~I2C_CR1_ACK;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]
      __i2c_set_stop(drv);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fe35 	bl	8001f0e <__i2c_set_stop>
    }

    if (drv->nReadLen == 0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	891b      	ldrh	r3, [r3, #8]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <__i2c_event_irq_handler+0xf8>
    {
      drv->bComplete = true;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	759a      	strb	r2, [r3, #22]
    }
  }

  /* TXE set, BTF clear: tx buffer empty, still writing. */
  if (sr1 & I2C_SR1_TXE && !(sr1 & I2C_SR1_BTF))
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02c      	beq.n	8002318 <__i2c_event_irq_handler+0x15c>
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d127      	bne.n	8002318 <__i2c_event_irq_handler+0x15c>
  {
    if (drv->nWriteLen)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d013      	beq.n	80022fa <__i2c_event_irq_handler+0x13e>
    {
      /* send next byte from write buffer. */
      i2cReg->DR = *(drv->pWrite);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	611a      	str	r2, [r3, #16]
      drv->pWrite++;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60da      	str	r2, [r3, #12]
      drv->nWriteLen--;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	88db      	ldrh	r3, [r3, #6]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	80da      	strh	r2, [r3, #6]
        drv->bComplete = true;
      }
    }
  }

}
 80022f8:	e00e      	b.n	8002318 <__i2c_event_irq_handler+0x15c>
      if (drv->nReadLen)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	891b      	ldrh	r3, [r3, #8]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <__i2c_event_irq_handler+0x150>
        __i2c_set_start(drv);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fde5 	bl	8001ed4 <__i2c_set_start>
}
 800230a:	e005      	b.n	8002318 <__i2c_event_irq_handler+0x15c>
        __i2c_set_stop(drv);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fdfe 	bl	8001f0e <__i2c_set_stop>
        drv->bComplete = true;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	759a      	strb	r2, [r3, #22]
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <__i2c_error_irq_handler>:

static void __i2c_error_irq_handler(i2cdrv_t *drv)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Read SRs to clear them */
  drv->pHW->reg->SR1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
  drv->pHW->reg->SR2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]

  /* Write 0 to SR1 ?? XXX why  */
  drv->pHW->reg->SR1 = 0;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]

  /* Send stop */
//  __i2c_set_stop(drv);   //  zamrzava
  drv->bError = 1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	751a      	strb	r2, [r3, #20]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <I2C1_EV_IRQHandler>:

/* Static per-hw event handlers */
void I2C1_EV_IRQHandler (void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  __i2c_event_irq_handler(i2c1);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <I2C1_EV_IRQHandler+0x10>)
 800235a:	f7ff ff2f 	bl	80021bc <__i2c_event_irq_handler>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000014 	.word	0x20000014

08002368 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  __i2c_event_irq_handler(i2c2);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <I2C2_EV_IRQHandler+0x10>)
 800236e:	f7ff ff25 	bl	80021bc <__i2c_event_irq_handler>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000002c 	.word	0x2000002c

0800237c <I2C3_EV_IRQHandler>:

void I2C3_EV_IRQHandler (void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  __i2c_event_irq_handler(i2c3);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <I2C3_EV_IRQHandler+0x10>)
 8002382:	f7ff ff1b 	bl	80021bc <__i2c_event_irq_handler>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000044 	.word	0x20000044

08002390 <I2C1_ER_IRQHandler>:

/* Static per-hw error handlers */
void I2C1_ER_IRQHandler (void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  __i2c_error_irq_handler(i2c1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <I2C1_ER_IRQHandler+0x10>)
 8002396:	f7ff ffc3 	bl	8002320 <__i2c_error_irq_handler>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000014 	.word	0x20000014

080023a4 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  __i2c_error_irq_handler(i2c2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <I2C2_ER_IRQHandler+0x10>)
 80023aa:	f7ff ffb9 	bl	8002320 <__i2c_error_irq_handler>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000002c 	.word	0x2000002c

080023b8 <I2C3_ER_IRQHandler>:

void I2C3_ER_IRQHandler (void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  __i2c_error_irq_handler(i2c3);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <I2C3_ER_IRQHandler+0x10>)
 80023be:	f7ff ffaf 	bl	8002320 <__i2c_error_irq_handler>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000044 	.word	0x20000044

080023cc <IPS6404_Init>:
static uint32_t            g_nBurstSize;

void _Send24bit(uint32_t nValue);

bool IPS6404_Init(spi_drv_t* pSpi, gpio_pins_e eCS, uint32_t nMaxFreqMhz)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	460b      	mov	r3, r1
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	72fb      	strb	r3, [r7, #11]
  g_pSpi = pSpi;
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <IPS6404_Init+0xac>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6013      	str	r3, [r2, #0]
  g_eCS = eCS;
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <IPS6404_Init+0xb0>)
 80023e2:	7afb      	ldrb	r3, [r7, #11]
 80023e4:	7013      	strb	r3, [r2, #0]

  // calculate SPI prescaler
  g_eSpiPrescaler = spi_CalculatePrescaler(pSpi->nBusFrequencyHz, nMaxFreqMhz);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fb4f 	bl	8002a90 <spi_CalculatePrescaler>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <IPS6404_Init+0xb4>)
 80023f8:	701a      	strb	r2, [r3, #0]

  // calculate burst size (8 uS CS max low pulse with)
  g_nBurstSize = pSpi->nBusFrequencyHz / spi_GetPrescalerDivider(g_eSpiPrescaler) / IPS6404_CS_MAX_CLOCK_HZ / 8;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685c      	ldr	r4, [r3, #4]
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <IPS6404_Init+0xb4>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fb7e 	bl	8002b04 <spi_GetPrescalerDivider>
 8002408:	4603      	mov	r3, r0
 800240a:	fbb4 f3f3 	udiv	r3, r4, r3
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <IPS6404_Init+0xb8>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <IPS6404_Init+0xbc>)
 8002418:	6013      	str	r3, [r2, #0]
  g_nBurstSize -= 4;    // subtract command + address bytes
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <IPS6404_Init+0xbc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3b04      	subs	r3, #4
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <IPS6404_Init+0xbc>)
 8002422:	6013      	str	r3, [r2, #0]

  // set CS for output
  GPIO_ClockEnable(eCS);
 8002424:	7afb      	ldrb	r3, [r7, #11]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fb1e 	bl	8001a68 <GPIO_ClockEnable>
  GPIO_SETPIN(eCS);
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002436:	3380      	adds	r3, #128	; 0x80
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	4619      	mov	r1, r3
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	618b      	str	r3, [r1, #24]
  GPIO_ConfigPin(eCS, mode_output, outtype_pushpull, pushpull_no, speed_veryhigh);
 800244a:	7af8      	ldrb	r0, [r7, #11]
 800244c:	2303      	movs	r3, #3
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	f7ff fb9c 	bl	8001b92 <GPIO_ConfigPin>

  IPS6404_Reset();
 800245a:	f000 f819 	bl	8002490 <IPS6404_Reset>

  if (IPS6404_GetID() != IPS6404_ID)
 800245e:	f000 f8e1 	bl	8002624 <IPS6404_GetID>
 8002462:	4602      	mov	r2, r0
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <IPS6404_Init+0xc0>)
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <IPS6404_Init+0xa2>
  {
    return false;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <IPS6404_Init+0xa4>
  }

  return true;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	200000f4 	.word	0x200000f4
 800247c:	200000f9 	.word	0x200000f9
 8002480:	200000f8 	.word	0x200000f8
 8002484:	431bde83 	.word	0x431bde83
 8002488:	200000fc 	.word	0x200000fc
 800248c:	000d5d46 	.word	0x000d5d46

08002490 <IPS6404_Reset>:

void IPS6404_Reset(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <IPS6404_Reset+0x44>)
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <IPS6404_Reset+0x48>)
 800249a:	7819      	ldrb	r1, [r3, #0]
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <IPS6404_Reset+0x4c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	f000 fa65 	bl	8002970 <spi_TransactionBegin>

  spi_SendData8(g_pSpi, IPS6404_RESET_ENABLE);
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <IPS6404_Reset+0x44>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2166      	movs	r1, #102	; 0x66
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 faa3 	bl	80029f8 <spi_SendData8>
  spi_SendData8(g_pSpi, IPS6404_RESET);
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <IPS6404_Reset+0x44>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2199      	movs	r1, #153	; 0x99
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fa9d 	bl	80029f8 <spi_SendData8>

  spi_TransactionEnd(g_pSpi, g_eCS);
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <IPS6404_Reset+0x44>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <IPS6404_Reset+0x48>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 fa72 	bl	80029b2 <spi_TransactionEnd>
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200000f4 	.word	0x200000f4
 80024d8:	200000f9 	.word	0x200000f9
 80024dc:	200000f8 	.word	0x200000f8

080024e0 <IPS6404_ReadBuffer>:

void IPS6404_ReadBuffer(uint32_t nAddr, uint8_t* pBuffer, uint32_t nLength)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t nBurstSize;

  while (nLength)
 80024ec:	e03b      	b.n	8002566 <IPS6404_ReadBuffer+0x86>
  {
    spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <IPS6404_ReadBuffer+0x94>)
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <IPS6404_ReadBuffer+0x98>)
 80024f4:	7819      	ldrb	r1, [r3, #0]
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <IPS6404_ReadBuffer+0x9c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 fa38 	bl	8002970 <spi_TransactionBegin>

    spi_SendData8(g_pSpi, IPS6404_READ_DATA);
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <IPS6404_ReadBuffer+0x94>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2103      	movs	r1, #3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fa76 	bl	80029f8 <spi_SendData8>
    _Send24bit(nAddr);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8d3 	bl	80026b8 <_Send24bit>

#if IPS6404_READ_DATA == 0x0B
  spi_SendData8(g_pSpi, DUMMY_BYTE);
#endif

    nBurstSize = g_nBurstSize;
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <IPS6404_ReadBuffer+0xa0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
    if (nBurstSize < nLength)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	d201      	bcs.n	8002524 <IPS6404_ReadBuffer+0x44>
    {
      nBurstSize = nLength;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	617b      	str	r3, [r7, #20]
    }

    nAddr += nBurstSize;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	4413      	add	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
    nLength -= nBurstSize;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	607b      	str	r3, [r7, #4]
    while (nBurstSize--)
 8002534:	e00a      	b.n	800254c <IPS6404_ReadBuffer+0x6c>
    {
      *pBuffer++ = spi_SendData8(g_pSpi, SPI_DUMMY_BYTE);
 8002536:	68bc      	ldr	r4, [r7, #8]
 8002538:	1c63      	adds	r3, r4, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <IPS6404_ReadBuffer+0x94>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	21ff      	movs	r1, #255	; 0xff
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fa58 	bl	80029f8 <spi_SendData8>
 8002548:	4603      	mov	r3, r0
 800254a:	7023      	strb	r3, [r4, #0]
    while (nBurstSize--)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	617a      	str	r2, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <IPS6404_ReadBuffer+0x56>
    }

    spi_TransactionEnd(g_pSpi, g_eCS);
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <IPS6404_ReadBuffer+0x94>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <IPS6404_ReadBuffer+0x98>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f000 fa26 	bl	80029b2 <spi_TransactionEnd>
  while (nLength)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1c0      	bne.n	80024ee <IPS6404_ReadBuffer+0xe>
  }
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	200000f4 	.word	0x200000f4
 8002578:	200000f9 	.word	0x200000f9
 800257c:	200000f8 	.word	0x200000f8
 8002580:	200000fc 	.word	0x200000fc

08002584 <IPS6404_WriteBuffer>:

void IPS6404_WriteBuffer(uint32_t nAddr, uint8_t* pBuffer, uint32_t nLength)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t nBurstSize;

  while (nLength)
 8002590:	e039      	b.n	8002606 <IPS6404_WriteBuffer+0x82>
  {
    spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <IPS6404_WriteBuffer+0x90>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <IPS6404_WriteBuffer+0x94>)
 8002598:	7819      	ldrb	r1, [r3, #0]
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <IPS6404_WriteBuffer+0x98>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f9e6 	bl	8002970 <spi_TransactionBegin>
    spi_SendData8(g_pSpi, IPS6404_WRITE_DATA);
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <IPS6404_WriteBuffer+0x90>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2102      	movs	r1, #2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fa24 	bl	80029f8 <spi_SendData8>
    _Send24bit(nAddr);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f881 	bl	80026b8 <_Send24bit>

    nBurstSize = g_nBurstSize;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <IPS6404_WriteBuffer+0x9c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]
    if (nBurstSize < nLength)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d201      	bcs.n	80025c8 <IPS6404_WriteBuffer+0x44>
    {
      nBurstSize = nLength;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	617b      	str	r3, [r7, #20]
    }

    nAddr += nBurstSize;
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	4413      	add	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
    nLength -= nBurstSize;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	607b      	str	r3, [r7, #4]
    while (nBurstSize--)
 80025d8:	e008      	b.n	80025ec <IPS6404_WriteBuffer+0x68>
    {
      spi_SendData8(g_pSpi, *pBuffer++);
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <IPS6404_WriteBuffer+0x90>)
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	60ba      	str	r2, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	f000 fa06 	bl	80029f8 <spi_SendData8>
    while (nBurstSize--)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	617a      	str	r2, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f1      	bne.n	80025da <IPS6404_WriteBuffer+0x56>
    }

    spi_TransactionEnd(g_pSpi, g_eCS);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <IPS6404_WriteBuffer+0x90>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <IPS6404_WriteBuffer+0x94>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f000 f9d6 	bl	80029b2 <spi_TransactionEnd>
  while (nLength)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1c2      	bne.n	8002592 <IPS6404_WriteBuffer+0xe>
  }
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200000f4 	.word	0x200000f4
 8002618:	200000f9 	.word	0x200000f9
 800261c:	200000f8 	.word	0x200000f8
 8002620:	200000fc 	.word	0x200000fc

08002624 <IPS6404_GetID>:
{
  IPS6404_WriteBuffer(nAddr, (uint8_t*)&nValue, 3);
}

uint32_t IPS6404_GetID()
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  spi_TransactionBegin(g_pSpi, g_eCS, g_eSpiPrescaler);
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <IPS6404_GetID+0x88>)
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <IPS6404_GetID+0x8c>)
 8002630:	7819      	ldrb	r1, [r3, #0]
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <IPS6404_GetID+0x90>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f99a 	bl	8002970 <spi_TransactionBegin>

  uint32_t nID = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  spi_SendData8(g_pSpi, IPS6404_READ_ID);
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <IPS6404_GetID+0x88>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	219f      	movs	r1, #159	; 0x9f
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f9d6 	bl	80029f8 <spi_SendData8>
  _Send24bit(0);
 800264c:	2000      	movs	r0, #0
 800264e:	f000 f833 	bl	80026b8 <_Send24bit>
  nID = spi_SendData8(g_pSpi, SPI_DUMMY_BYTE) << 16;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <IPS6404_GetID+0x88>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	21ff      	movs	r1, #255	; 0xff
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f9cd 	bl	80029f8 <spi_SendData8>
 800265e:	4603      	mov	r3, r0
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	607b      	str	r3, [r7, #4]
  nID |= spi_SendData8(g_pSpi, SPI_DUMMY_BYTE) << 8;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <IPS6404_GetID+0x88>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	21ff      	movs	r1, #255	; 0xff
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f9c4 	bl	80029f8 <spi_SendData8>
 8002670:	4603      	mov	r3, r0
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	607b      	str	r3, [r7, #4]
  nID |= spi_SendData8(g_pSpi, SPI_DUMMY_BYTE);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <IPS6404_GetID+0x88>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	21ff      	movs	r1, #255	; 0xff
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f9b8 	bl	80029f8 <spi_SendData8>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4313      	orrs	r3, r2
 8002690:	607b      	str	r3, [r7, #4]

  spi_TransactionEnd(g_pSpi, g_eCS);
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <IPS6404_GetID+0x88>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <IPS6404_GetID+0x8c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f000 f988 	bl	80029b2 <spi_TransactionEnd>

  return nID;
 80026a2:	687b      	ldr	r3, [r7, #4]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200000f4 	.word	0x200000f4
 80026b0:	200000f9 	.word	0x200000f9
 80026b4:	200000f8 	.word	0x200000f8

080026b8 <_Send24bit>:
{
  return g_pSpi;
}

void _Send24bit(uint32_t nValue)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  spi_SendData8(g_pSpi, nValue >> 16);
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <_Send24bit+0x44>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f000 f993 	bl	80029f8 <spi_SendData8>
  spi_SendData8(g_pSpi, nValue >> 8);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <_Send24bit+0x44>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 f98a 	bl	80029f8 <spi_SendData8>
  spi_SendData8(g_pSpi, nValue);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <_Send24bit+0x44>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f982 	bl	80029f8 <spi_SendData8>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200000f4 	.word	0x200000f4

08002700 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  App_Init();
 8002704:	f7fe fd0c 	bl	8001120 <App_Init>

  while (1)
  {
    App_Exec();
 8002708:	f7fe fd6c 	bl	80011e4 <App_Exec>
 800270c:	e7fc      	b.n	8002708 <main+0x8>

0800270e <LL_SPI_Enable>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_SPI_Disable>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d101      	bne.n	8002766 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d101      	bne.n	800278c <LL_SPI_IsActiveFlag_BSY+0x18>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_SPI_IsActiveFlag_BSY+0x1a>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	330c      	adds	r3, #12
 80027aa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <LL_APB1_GRP1_EnableClock>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027c8:	4908      	ldr	r1, [pc, #32]	; (80027ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80027cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80027d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40023800 	.word	0x40023800

080027f0 <LL_APB2_GRP1_EnableClock>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027f8:	4908      	ldr	r1, [pc, #32]	; (800281c <LL_APB2_GRP1_EnableClock+0x2c>)
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <LL_APB2_GRP1_EnableClock+0x2c>)
 80027fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4313      	orrs	r3, r2
 8002802:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40023800 	.word	0x40023800

08002820 <spi_Init>:
spi_drv_t _spi3_drv = { &spi3_hw, 0, spi_mode_0, spi_dir_mode_2Lines_FullDuplex, 0, 0, NULL, NULL, false, false, false };



void spi_Init(spi_drv_t* pDrv, gpio_pins_e eClkPin, gpio_pins_e eMosiPin, gpio_pins_e eMisoPin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b092      	sub	sp, #72	; 0x48
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	70fb      	strb	r3, [r7, #3]
 8002832:	460b      	mov	r3, r1
 8002834:	70bb      	strb	r3, [r7, #2]
 8002836:	4613      	mov	r3, r2
 8002838:	707b      	strb	r3, [r7, #1]
  GPIO_ConfigPin(eClkPin, mode_alternate, outtype_pushpull, pushpull_no, speed_high);
 800283a:	78f8      	ldrb	r0, [r7, #3]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	2200      	movs	r2, #0
 8002844:	2102      	movs	r1, #2
 8002846:	f7ff f9a4 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eClkPin, pDrv->pHW->nGpioAF);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	791a      	ldrb	r2, [r3, #4]
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f947 	bl	8001ae8 <GPIO_SetAFpin>

  GPIO_ConfigPin(eMosiPin, mode_alternate, outtype_pushpull, pushpull_no, speed_high);
 800285a:	78b8      	ldrb	r0, [r7, #2]
 800285c:	2302      	movs	r3, #2
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	2200      	movs	r2, #0
 8002864:	2102      	movs	r1, #2
 8002866:	f7ff f994 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eMosiPin, pDrv->pHW->nGpioAF);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	791a      	ldrb	r2, [r3, #4]
 8002870:	78bb      	ldrb	r3, [r7, #2]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f937 	bl	8001ae8 <GPIO_SetAFpin>

  if (eMisoPin != P_UNUSED)
 800287a:	787b      	ldrb	r3, [r7, #1]
 800287c:	2bff      	cmp	r3, #255	; 0xff
 800287e:	d00f      	beq.n	80028a0 <spi_Init+0x80>
  {
    GPIO_ConfigPin(eMisoPin, mode_alternate, outtype_pushpull, pushpull_no, speed_high);
 8002880:	7878      	ldrb	r0, [r7, #1]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2300      	movs	r3, #0
 8002888:	2200      	movs	r2, #0
 800288a:	2102      	movs	r1, #2
 800288c:	f7ff f981 	bl	8001b92 <GPIO_ConfigPin>
    GPIO_SetAFpin(eMisoPin, pDrv->pHW->nGpioAF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	791a      	ldrb	r2, [r3, #4]
 8002896:	787b      	ldrb	r3, [r7, #1]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f924 	bl	8001ae8 <GPIO_SetAFpin>
  }

  LL_RCC_ClocksTypeDef RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks); // Get system clocks
 80028a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe85 	bl	80005b4 <LL_RCC_GetSystemClocksFreq>

  if (pDrv->pHW->reg == SPI1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <spi_Init+0x144>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d106      	bne.n	80028c4 <spi_Init+0xa4>
  {
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80028b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028ba:	f7ff ff99 	bl	80027f0 <LL_APB2_GRP1_EnableClock>
    pDrv->nBusFrequencyHz = RCC_Clocks.PCLK2_Frequency;
 80028be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	605a      	str	r2, [r3, #4]
  }

  if (pDrv->pHW->reg == SPI2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	; (8002968 <spi_Init+0x148>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d107      	bne.n	80028e0 <spi_Init+0xc0>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80028d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028d4:	f7ff ff74 	bl	80027c0 <LL_APB1_GRP1_EnableClock>
    pDrv->nBusFrequencyHz = RCC_Clocks.PCLK1_Frequency;
 80028d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e00c      	b.n	80028fa <spi_Init+0xda>
  }
  else if (pDrv->pHW->reg == SPI3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <spi_Init+0x14c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d106      	bne.n	80028fa <spi_Init+0xda>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80028ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028f0:	f7ff ff66 	bl	80027c0 <LL_APB1_GRP1_EnableClock>
    pDrv->nBusFrequencyHz = RCC_Clocks.PCLK1_Frequency;
 80028f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]
  }

  /* SPI configuration -------------------------------------------------------*/
  LL_SPI_DeInit(pDrv->pHW->reg);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd ff8f 	bl	8000824 <LL_SPI_DeInit>

  LL_SPI_InitTypeDef  SPI_InitStructure;
  SPI_InitStructure.TransferDirection = pDrv->eDirMode;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	895b      	ldrh	r3, [r3, #10]
 800290a:	60bb      	str	r3, [r7, #8]
  SPI_InitStructure.Mode = LL_SPI_MODE_MASTER;
 800290c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002910:	60fb      	str	r3, [r7, #12]
  SPI_InitStructure.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  SPI_InitStructure.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  SPI_InitStructure.ClockPhase = LL_SPI_PHASE_1EDGE;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  SPI_InitStructure.NSS = LL_SPI_NSS_SOFT;
 800291e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002922:	61fb      	str	r3, [r7, #28]
  SPI_InitStructure.BaudRate = spi_br_256;  // SPI speed
 8002924:	2338      	movs	r3, #56	; 0x38
 8002926:	623b      	str	r3, [r7, #32]
  SPI_InitStructure.BitOrder = LL_SPI_MSB_FIRST;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStructure.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_SPI_Init(pDrv->pHW->reg, &SPI_InitStructure);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f107 0208 	add.w	r2, r7, #8
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd ffcd 	bl	80008dc <LL_SPI_Init>

  spi_SetMode(pDrv, pDrv->eMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7a1b      	ldrb	r3, [r3, #8]
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8f9 	bl	8002b40 <spi_SetMode>
  LL_SPI_Enable(pDrv->pHW->reg);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff feda 	bl	800270e <LL_SPI_Enable>
}
 800295a:	bf00      	nop
 800295c:	3740      	adds	r7, #64	; 0x40
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40013000 	.word	0x40013000
 8002968:	40003800 	.word	0x40003800
 800296c:	40003c00 	.word	0x40003c00

08002970 <spi_TransactionBegin>:

void spi_TransactionBegin(spi_drv_t* pDrv, gpio_pins_e eChipSelect, spi_br_e ePrescaler)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
 800297c:	4613      	mov	r3, r2
 800297e:	70bb      	strb	r3, [r7, #2]
  spi_SetPrescaler(pDrv, ePrescaler);
 8002980:	78bb      	ldrb	r3, [r7, #2]
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f861 	bl	8002a4c <spi_SetPrescaler>
  GPIO_RESETPIN(eChipSelect);
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002994:	3380      	adds	r3, #128	; 0x80
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	4619      	mov	r1, r3
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	618b      	str	r3, [r1, #24]
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <spi_TransactionEnd>:

void spi_TransactionEnd(spi_drv_t* pDrv, gpio_pins_e eChipSelect)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  while (LL_SPI_IsActiveFlag_BSY(pDrv->pHW->reg));
 80029be:	bf00      	nop
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fed4 	bl	8002774 <LL_SPI_IsActiveFlag_BSY>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f6      	bne.n	80029c0 <spi_TransactionEnd+0xe>
  GPIO_SETPIN(eChipSelect);
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80029dc:	3380      	adds	r3, #128	; 0x80
 80029de:	029b      	lsls	r3, r3, #10
 80029e0:	4619      	mov	r1, r3
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	2201      	movs	r2, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	618b      	str	r3, [r1, #24]
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <spi_SendData8>:
  while (!(pDrv->pHW->reg->SR & LL_SPI_SR_TXE));
  pDrv->pHW->reg->DR = nValue & 0xFF;
}

uint8_t spi_SendData8(spi_drv_t* pDrv, uint8_t nValue)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  while (!LL_SPI_IsActiveFlag_TXE(pDrv->pHW->reg));
 8002a04:	bf00      	nop
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fe9e 	bl	800274e <LL_SPI_IsActiveFlag_TXE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f6      	beq.n	8002a06 <spi_SendData8+0xe>
  LL_SPI_TransmitData8(pDrv->pHW->reg, nValue);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff feb9 	bl	800279a <LL_SPI_TransmitData8>

//  while (LL_SPI_IsActiveFlag_BSY(pDrv->pHW->reg));
//  return LL_SPI_ReceiveData8(pDrv->pHW->reg);

  while ((pDrv->pHW->reg->SR & LL_SPI_SR_BSY));
 8002a28:	bf00      	nop
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f7      	bne.n	8002a2a <spi_SendData8+0x32>
  return pDrv->pHW->reg->DR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	b2db      	uxtb	r3, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <spi_SetPrescaler>:
  spi_SetDirection(pDrv, spi_dir_tx);
  return nValue;
}

void spi_SetPrescaler(spi_drv_t* pDrv, spi_br_e ePrescaler)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70fb      	strb	r3, [r7, #3]
  LL_SPI_Disable(pDrv->pHW->reg);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fe65 	bl	800272e <LL_SPI_Disable>

  pDrv->pHW->reg->CR1 = (pDrv->pHW->reg->CR1 & ~(SPI_CR1_BR)) | ePrescaler;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	f022 0138 	bic.w	r1, r2, #56	; 0x38
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  LL_SPI_Enable(pDrv->pHW->reg);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe43 	bl	800270e <LL_SPI_Enable>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <spi_CalculatePrescaler>:

spi_br_e spi_CalculatePrescaler(uint32_t nBusClock_Hz, uint32_t nMaxFreq_Hz)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  const spi_br_e arrPrescalers[] = { spi_br_2, spi_br_4, spi_br_8, spi_br_16, spi_br_32, spi_br_64, spi_br_128, spi_br_256 };
 8002a9a:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <spi_CalculatePrescaler+0x70>)
 8002a9c:	f107 0308 	add.w	r3, r7, #8
 8002aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa4:	e883 0003 	stmia.w	r3, {r0, r1}
  spi_br_e ePrescaler = spi_br_256;
 8002aa8:	2338      	movs	r3, #56	; 0x38
 8002aaa:	75fb      	strb	r3, [r7, #23]
  uint16_t nSize = sizeof(arrPrescalers) / sizeof(spi_br_e);
 8002aac:	2308      	movs	r3, #8
 8002aae:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i = 0; i < nSize; ++i)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75bb      	strb	r3, [r7, #22]
 8002ab4:	e017      	b.n	8002ae6 <spi_CalculatePrescaler+0x56>
  {
    uint32_t nDivider = 1 << (i + 1);
 8002ab6:	7dbb      	ldrb	r3, [r7, #22]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	613b      	str	r3, [r7, #16]
    if (nBusClock_Hz / nDivider <= nMaxFreq_Hz)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d807      	bhi.n	8002ae0 <spi_CalculatePrescaler+0x50>
    {
      ePrescaler = arrPrescalers[i];
 8002ad0:	7dbb      	ldrb	r3, [r7, #22]
 8002ad2:	f107 0218 	add.w	r2, r7, #24
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002adc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ade:	e007      	b.n	8002af0 <spi_CalculatePrescaler+0x60>
  for (uint8_t i = 0; i < nSize; ++i)
 8002ae0:	7dbb      	ldrb	r3, [r7, #22]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	75bb      	strb	r3, [r7, #22]
 8002ae6:	7dbb      	ldrb	r3, [r7, #22]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	8aba      	ldrh	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8e2      	bhi.n	8002ab6 <spi_CalculatePrescaler+0x26>
    }
  }

  return ePrescaler;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	08003438 	.word	0x08003438

08002b04 <spi_GetPrescalerDivider>:

uint32_t spi_GetPrescalerDivider(spi_br_e ePrescaler)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  const uint8_t DividerTable[] = { 2, 4, 8, 16, 32, 64, 128 };
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <spi_GetPrescalerDivider+0x38>)
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b18:	6018      	str	r0, [r3, #0]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	8019      	strh	r1, [r3, #0]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	0c0a      	lsrs	r2, r1, #16
 8002b22:	701a      	strb	r2, [r3, #0]

  return DividerTable[ePrescaler];
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f107 0210 	add.w	r2, r7, #16
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	08003440 	.word	0x08003440

08002b40 <spi_SetMode>:

void spi_SetMode(spi_drv_t* pDrv, spi_mode_e eMode)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  LL_SPI_Disable(pDrv->pHW->reg);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fdeb 	bl	800272e <LL_SPI_Disable>

  pDrv->pHW->reg->CR1 = (pDrv->pHW->reg->CR1 & ~(SPI_CR1_CPHA | SPI_CR1_CPOL)) | eMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	f022 0103 	bic.w	r1, r2, #3
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

  LL_SPI_Enable(pDrv->pHW->reg);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fdc9 	bl	800270e <LL_SPI_Enable>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <NVIC_SetPriority>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0b      	bge.n	8002bb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <NVIC_SetPriority+0x4c>)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	3b04      	subs	r3, #4
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	761a      	strb	r2, [r3, #24]
}
 8002bae:	e009      	b.n	8002bc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <NVIC_SetPriority+0x50>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000ed00 	.word	0xe000ed00
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ffc2 	bl	8002b84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <LL_APB2_GRP1_EnableClock>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c24:	4908      	ldr	r1, [pc, #32]	; (8002c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4013      	ands	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40023800 	.word	0x40023800

08002c4c <Timer_Init>:
static uint8_t g_nCallbacks = 0;

static volatile uint32_t g_nTicks = 0;

void Timer_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  Timer_SystickUpdate();
 8002c50:	f000 f804 	bl	8002c5c <Timer_SystickUpdate>
  TimerUs_init();
 8002c54:	f000 f856 	bl	8002d04 <TimerUs_init>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <Timer_SystickUpdate>:

void Timer_SystickUpdate(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 8002c60:	f000 fb14 	bl	800328c <SystemCoreClockUpdate>

  // set Systick to 1ms
  if (SysTick_Config(SystemCoreClock / 1000))
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <Timer_SystickUpdate+0x28>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <Timer_SystickUpdate+0x2c>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ffb1 	bl	8002bd8 <SysTick_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d000      	beq.n	8002c7e <Timer_SystickUpdate+0x22>
  {
    /* Capture error */
    while (1);
 8002c7c:	e7fe      	b.n	8002c7c <Timer_SystickUpdate+0x20>
  }
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200000bc 	.word	0x200000bc
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <Timer_Delay_ms>:

void Timer_Delay_ms(uint32_t delay_ms)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t nEndTime = g_nTicks + delay_ms;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <Timer_Delay_ms+0x2c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  while (g_nTicks < nEndTime);
 8002c9e:	bf00      	nop
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <Timer_Delay_ms+0x2c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3fa      	bcc.n	8002ca0 <Timer_Delay_ms+0x14>
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000114 	.word	0x20000114

08002cbc <SysTick_Handler>:
  while (1);
  return false;
}

void SysTick_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  g_nTicks++;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <SysTick_Handler+0x40>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <SysTick_Handler+0x40>)
 8002cca:	6013      	str	r3, [r2, #0]

  for (uint8_t i = 0; i < TIMER_CALLBACKS; i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	71fb      	strb	r3, [r7, #7]
 8002cd0:	e00d      	b.n	8002cee <SysTick_Handler+0x32>
  {
    if (g_pSysTickCallback[i])
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Handler+0x44>)
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <SysTick_Handler+0x2c>
    {
      g_pSysTickCallback[i]();
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <SysTick_Handler+0x44>)
 8002ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce6:	4798      	blx	r3
  for (uint8_t i = 0; i < TIMER_CALLBACKS; i++)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	3301      	adds	r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d9ee      	bls.n	8002cd2 <SysTick_Handler+0x16>
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000114 	.word	0x20000114
 8002d00:	20000100 	.word	0x20000100

08002d04 <TimerUs_init>:

// timer for us counting
void TimerUs_init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

  // Enable clock for TIM_US
  LL_APB2_GRP1_EnableClock(TIMER_US_CLK);
 8002d08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002d0c:	f7ff ff86 	bl	8002c1c <LL_APB2_GRP1_EnableClock>
  Timer_UsStart();
 8002d10:	f000 f802 	bl	8002d18 <Timer_UsStart>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <Timer_UsStart>:

void Timer_UsStart(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
  LL_RCC_ClocksTypeDef RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d1e:	463b      	mov	r3, r7
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc47 	bl	80005b4 <LL_RCC_GetSystemClocksFreq>

  TIMER_US->PSC = RCC_Clocks.PCLK2_Frequency / 1000000; // 1 MHz
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <Timer_UsStart+0x3c>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	490b      	ldr	r1, [pc, #44]	; (8002d58 <Timer_UsStart+0x40>)
 8002d2c:	fba1 1303 	umull	r1, r3, r1, r3
 8002d30:	0c9b      	lsrs	r3, r3, #18
 8002d32:	6293      	str	r3, [r2, #40]	; 0x28
  TIMER_US->CNT = 0;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <Timer_UsStart+0x3c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
  TIMER_US->EGR = TIM_EGR_UG;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <Timer_UsStart+0x3c>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	615a      	str	r2, [r3, #20]
  TIMER_US->CR1 |= TIM_CR1_CEN;
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <Timer_UsStart+0x3c>)
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <Timer_UsStart+0x3c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40014000 	.word	0x40014000
 8002d58:	431bde83 	.word	0x431bde83

08002d5c <NVIC_EnableIRQ>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d66:	4909      	ldr	r1, [pc, #36]	; (8002d8c <NVIC_EnableIRQ+0x30>)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	79fa      	ldrb	r2, [r7, #7]
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <LL_APB1_GRP1_EnableClock>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002d98:	4908      	ldr	r1, [pc, #32]	; (8002dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <LL_APB2_GRP1_EnableClock>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dc8:	4908      	ldr	r1, [pc, #32]	; (8002dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40023800 	.word	0x40023800

08002df0 <LL_USART_Enable>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b80      	cmp	r3, #128	; 0x80
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	b2db      	uxtb	r3, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	605a      	str	r2, [r3, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <usart_Init>:

static uint8_t*  g_pBuffer;
static uint32_t  g_nLen;

void usart_Init(usart_drv_t* pDrv, void(*rxCb)(uint8_t), gpio_pins_e eTxPin, gpio_pins_e eRxPin, uint32_t nBaudrate)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08e      	sub	sp, #56	; 0x38
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	460b      	mov	r3, r1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4613      	mov	r3, r2
 8002f08:	71bb      	strb	r3, [r7, #6]
  g_rxCallback = rxCb;
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <usart_Init+0xdc>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6013      	str	r3, [r2, #0]

  if (pDrv->pHW->reg == USART1)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <usart_Init+0xe0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <usart_Init+0x2e>
  {
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002f1c:	2010      	movs	r0, #16
 8002f1e:	f7ff ff4f 	bl	8002dc0 <LL_APB2_GRP1_EnableClock>
  }

  if (pDrv->pHW->reg == USART2)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <usart_Init+0xe4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d103      	bne.n	8002f36 <usart_Init+0x42>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002f2e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f32:	f7ff ff2d 	bl	8002d90 <LL_APB1_GRP1_EnableClock>
  }

  /* USART TX pin configuration */
  GPIO_ConfigPin(eTxPin, mode_alternate, outtype_pushpull, pushpull_no, speed_high);
 8002f36:	79f8      	ldrb	r0, [r7, #7]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2102      	movs	r1, #2
 8002f42:	f7fe fe26 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eTxPin, pDrv->pHW->nGpioAF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	7a1a      	ldrb	r2, [r3, #8]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fdc9 	bl	8001ae8 <GPIO_SetAFpin>

  /* USART RX pin configuration */
  GPIO_ConfigPin(eRxPin, mode_alternate, outtype_pushpull, pushpull_no, speed_high);
 8002f56:	79b8      	ldrb	r0, [r7, #6]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2102      	movs	r1, #2
 8002f62:	f7fe fe16 	bl	8001b92 <GPIO_ConfigPin>
  GPIO_SetAFpin(eRxPin, pDrv->pHW->nGpioAF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	7a1a      	ldrb	r2, [r3, #8]
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fdb9 	bl	8001ae8 <GPIO_SetAFpin>

  LL_USART_InitTypeDef usartInit;
  LL_USART_StructInit(&usartInit);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fe54 	bl	8000c28 <LL_USART_StructInit>

  usartInit.BaudRate = nBaudrate;
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	617b      	str	r3, [r7, #20]
  LL_USART_Init(pDrv->pHW->reg, &usartInit);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f107 0214 	add.w	r2, r7, #20
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fde5 	bl	8000b60 <LL_USART_Init>

  LL_USART_Enable(pDrv->pHW->reg);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff27 	bl	8002df0 <LL_USART_Enable>

  /* Enable RXNE interrupt */
  LL_USART_EnableIT_RXNE(pDrv->pHW->reg);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff57 	bl	8002e5c <LL_USART_EnableIT_RXNE>

  // Disable TXE interrupt - we enable it only when there is
  // data to send
  LL_USART_DisableIT_TXE(pDrv->pHW->reg);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff71 	bl	8002e9c <LL_USART_DisableIT_TXE>

  // Enable USART2 global interrupt
  NVIC_EnableIRQ(pDrv->pHW->irq);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff feca 	bl	8002d5c <NVIC_EnableIRQ>

}
 8002fc8:	bf00      	nop
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000118 	.word	0x20000118
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40004400 	.word	0x40004400

08002fdc <usart_Send>:

void usart_Send(usart_drv_t* pDrv, uint8_t *buf, uint32_t len)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  pDrv->bComplete = false;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	745a      	strb	r2, [r3, #17]
  pDrv->bLock = true;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	741a      	strb	r2, [r3, #16]
  g_pBuffer = buf;
 8002ff4:	4a07      	ldr	r2, [pc, #28]	; (8003014 <usart_Send+0x38>)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6013      	str	r3, [r2, #0]
  g_nLen = len;
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <usart_Send+0x3c>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6013      	str	r3, [r2, #0]
  LL_USART_EnableIT_TXE(pDrv->pHW->reg);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff38 	bl	8002e7c <LL_USART_EnableIT_TXE>
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000011c 	.word	0x2000011c
 8003018:	20000120 	.word	0x20000120

0800301c <usart_WaitForTransmitComplete>:
//  g_nLen = len;
//  USART_ITConfig(pDrv->pHW->reg, USART_IT_RXNE, ENABLE);
//}

void usart_WaitForTransmitComplete(usart_drv_t* pDrv)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  while (pDrv->bComplete == false);
 8003024:	bf00      	nop
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7c5b      	ldrb	r3, [r3, #17]
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f8      	bne.n	8003026 <usart_WaitForTransmitComplete+0xa>
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <usart_PrintLn>:

void usart_PrintLn(usart_drv_t* pDrv, char* pText)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  usart_WaitForTransmitComplete(pDrv);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffe6 	bl	800301c <usart_WaitForTransmitComplete>
  while (!LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg));
 8003050:	bf00      	nop
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff feec 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f6      	beq.n	8003052 <usart_PrintLn+0x12>
  while (*pText)
 8003064:	e013      	b.n	800308e <usart_PrintLn+0x4e>
  {
    while (!LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg));
 8003066:	bf00      	nop
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fee1 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f6      	beq.n	8003068 <usart_PrintLn+0x28>
    LL_USART_TransmitData8(pDrv->pHW->reg, *pText++);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	603a      	str	r2, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f7ff ff24 	bl	8002ed6 <LL_USART_TransmitData8>
  while (*pText)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e7      	bne.n	8003066 <usart_PrintLn+0x26>
  }

  while (!LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg));
 8003096:	bf00      	nop
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fec9 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f6      	beq.n	8003098 <usart_PrintLn+0x58>
  LL_USART_TransmitData8(pDrv->pHW->reg, 13);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	210d      	movs	r1, #13
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff0f 	bl	8002ed6 <LL_USART_TransmitData8>

  while (!LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg));
 80030b8:	bf00      	nop
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff feb8 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f6      	beq.n	80030ba <usart_PrintLn+0x7a>
  LL_USART_TransmitData8(pDrv->pHW->reg, 10);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	210a      	movs	r1, #10
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fefe 	bl	8002ed6 <LL_USART_TransmitData8>

  while (!LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg));
 80030da:	bf00      	nop
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fea7 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f6      	beq.n	80030dc <usart_PrintLn+0x9c>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <_usart_irq_handler>:

static void _usart_irq_handler(usart_drv_t *pDrv)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(LL_USART_IsActiveFlag_TXE(pDrv->pHW->reg))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe95 	bl	8002e36 <LL_USART_IsActiveFlag_TXE>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d024      	beq.n	800315c <_usart_irq_handler+0x64>
  {
    if (g_nLen)
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <_usart_irq_handler+0xa0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <_usart_irq_handler+0x4c>
    {
      LL_USART_TransmitData8(pDrv->pHW->reg, *g_pBuffer); // Send data
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <_usart_irq_handler+0xa4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7ff fed4 	bl	8002ed6 <LL_USART_TransmitData8>
      g_pBuffer++;
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <_usart_irq_handler+0xa4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <_usart_irq_handler+0xa4>)
 8003136:	6013      	str	r3, [r2, #0]
      g_nLen--;
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <_usart_irq_handler+0xa0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <_usart_irq_handler+0xa0>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <_usart_irq_handler+0x64>
    }
    else
    {
      // if no more data to send disable the transmitter
      LL_USART_DisableIT_TXE(pDrv->pHW->reg);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fea6 	bl	8002e9c <LL_USART_DisableIT_TXE>
      pDrv->bComplete = true;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	745a      	strb	r2, [r3, #17]
      pDrv->bLock = false;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	741a      	strb	r2, [r3, #16]
    }
  }

  // If RX buffer not empty interrupt
  if(LL_USART_IsActiveFlag_RXNE(pDrv->pHW->reg))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fe54 	bl	8002e10 <LL_USART_IsActiveFlag_RXNE>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <_usart_irq_handler+0x98>
//    g_nLen--;
//    if (g_nLen == 0)
//    {
//      USART_ITConfig(pDrv->pHW->reg, USART_IT_RXNE, DISABLE);
//    }
    uint8_t c = LL_USART_ReceiveData8(pDrv->pHW->reg);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fea1 	bl	8002ebc <LL_USART_ReceiveData8>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]
    if (g_rxCallback)
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_usart_irq_handler+0xa8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <_usart_irq_handler+0x98>
    {
      g_rxCallback(c); // send received data to higher layer
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <_usart_irq_handler+0xa8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	4610      	mov	r0, r2
 800318e:	4798      	blx	r3
    }
  }
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000120 	.word	0x20000120
 800319c:	2000011c 	.word	0x2000011c
 80031a0:	20000118 	.word	0x20000118

080031a4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  _usart_irq_handler(usart1);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <USART1_IRQHandler+0x10>)
 80031aa:	f7ff ffa5 	bl	80030f8 <_usart_irq_handler>
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000094 	.word	0x20000094

080031b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  _usart_irq_handler(usart2);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <USART2_IRQHandler+0x10>)
 80031be:	f7ff ff9b 	bl	80030f8 <_usart_irq_handler>
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200000a8 	.word	0x200000a8

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031d2:	e003      	b.n	80031dc <LoopCopyDataInit>

080031d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031da:	3104      	adds	r1, #4

080031dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031e4:	d3f6      	bcc.n	80031d4 <CopyDataInit>
  ldr  r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031e8:	e002      	b.n	80031f0 <LoopFillZerobss>

080031ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031ec:	f842 3b04 	str.w	r3, [r2], #4

080031f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031f4:	d3f9      	bcc.n	80031ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f6:	f000 f813 	bl	8003220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f000 f8c1 	bl	8003380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7ff fa7f 	bl	8002700 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003208:	080040b0 	.word	0x080040b0
  ldr  r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003210:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8003214:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8003218:	20000124 	.word	0x20000124

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <SystemInit+0x60>)
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <SystemInit+0x60>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003234:	4a13      	ldr	r2, [pc, #76]	; (8003284 <SystemInit+0x64>)
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <SystemInit+0x64>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <SystemInit+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003246:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <SystemInit+0x64>)
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <SystemInit+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <SystemInit+0x64>)
 8003258:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <SystemInit+0x68>)
 800325a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800325c:	4a09      	ldr	r2, [pc, #36]	; (8003284 <SystemInit+0x64>)
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <SystemInit+0x64>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <SystemInit+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SystemInit+0x60>)
 8003270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003274:	609a      	str	r2, [r3, #8]
#endif
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00
 8003284:	40023800 	.word	0x40023800
 8003288:	24003010 	.word	0x24003010

0800328c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	2302      	movs	r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	2302      	movs	r3, #2
 80032a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <SystemCoreClockUpdate+0xe0>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d007      	beq.n	80032c6 <SystemCoreClockUpdate+0x3a>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d009      	beq.n	80032ce <SystemCoreClockUpdate+0x42>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d13d      	bne.n	800333a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 80032c0:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <SystemCoreClockUpdate+0xe8>)
 80032c2:	601a      	str	r2, [r3, #0]
      break;
 80032c4:	e03d      	b.n	8003342 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 80032c8:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <SystemCoreClockUpdate+0xec>)
 80032ca:	601a      	str	r2, [r3, #0]
      break;
 80032cc:	e039      	b.n	8003342 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80032ce:	4b27      	ldr	r3, [pc, #156]	; (800336c <SystemCoreClockUpdate+0xe0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0d9b      	lsrs	r3, r3, #22
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <SystemCoreClockUpdate+0xe0>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <SystemCoreClockUpdate+0xec>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <SystemCoreClockUpdate+0xe0>)
 80032f4:	6852      	ldr	r2, [r2, #4]
 80032f6:	0992      	lsrs	r2, r2, #6
 80032f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e00b      	b.n	800331c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <SystemCoreClockUpdate+0xe8>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	4a17      	ldr	r2, [pc, #92]	; (800336c <SystemCoreClockUpdate+0xe0>)
 800330e:	6852      	ldr	r2, [r2, #4]
 8003310:	0992      	lsrs	r2, r2, #6
 8003312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <SystemCoreClockUpdate+0xe0>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 8003336:	6013      	str	r3, [r2, #0]
      break;
 8003338:	e003      	b.n	8003342 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <SystemCoreClockUpdate+0xe8>)
 800333e:	601a      	str	r2, [r3, #0]
      break;
 8003340:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <SystemCoreClockUpdate+0xe0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <SystemCoreClockUpdate+0xf0>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <SystemCoreClockUpdate+0xe4>)
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40023800 	.word	0x40023800
 8003370:	200000bc 	.word	0x200000bc
 8003374:	00f42400 	.word	0x00f42400
 8003378:	017d7840 	.word	0x017d7840
 800337c:	08004090 	.word	0x08004090

08003380 <__libc_init_array>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	4e0d      	ldr	r6, [pc, #52]	; (80033b8 <__libc_init_array+0x38>)
 8003384:	4c0d      	ldr	r4, [pc, #52]	; (80033bc <__libc_init_array+0x3c>)
 8003386:	1ba4      	subs	r4, r4, r6
 8003388:	10a4      	asrs	r4, r4, #2
 800338a:	2500      	movs	r5, #0
 800338c:	42a5      	cmp	r5, r4
 800338e:	d109      	bne.n	80033a4 <__libc_init_array+0x24>
 8003390:	4e0b      	ldr	r6, [pc, #44]	; (80033c0 <__libc_init_array+0x40>)
 8003392:	4c0c      	ldr	r4, [pc, #48]	; (80033c4 <__libc_init_array+0x44>)
 8003394:	f000 f818 	bl	80033c8 <_init>
 8003398:	1ba4      	subs	r4, r4, r6
 800339a:	10a4      	asrs	r4, r4, #2
 800339c:	2500      	movs	r5, #0
 800339e:	42a5      	cmp	r5, r4
 80033a0:	d105      	bne.n	80033ae <__libc_init_array+0x2e>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a8:	4798      	blx	r3
 80033aa:	3501      	adds	r5, #1
 80033ac:	e7ee      	b.n	800338c <__libc_init_array+0xc>
 80033ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033b2:	4798      	blx	r3
 80033b4:	3501      	adds	r5, #1
 80033b6:	e7f2      	b.n	800339e <__libc_init_array+0x1e>
 80033b8:	080040a8 	.word	0x080040a8
 80033bc:	080040a8 	.word	0x080040a8
 80033c0:	080040a8 	.word	0x080040a8
 80033c4:	080040ac 	.word	0x080040ac

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
